---
title: "Power Analysis - Vehicle Choices"
format: html
theme: united
execute:
  cache: true
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(
    warning = FALSE,
    message = FALSE,
    fig.path = "figs/",
    fig.width = 7.252,
    fig.height = 4,
    comment = "#>",
    fig.retina = 3
)

library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
```



# ----------------------------
# For car
## Step 1: Generate Profiles
```{r}
profiles <- cbc_profiles(
  powertrain = c('gas', 'bev', 'phev', 'hev'),
  price = seq(0.8, 1.1, 0.1),
  range_bev = c(0, seq(50, 250, 25)),
  range_phev = c(0, seq(10, 40, 10)),
  mileage = seq(20000, 60000, 5000),
  make_year = seq(2015, 2023),
  operating_cost = seq(3, 21, 3)
)

```

### Resrictions

Only include profiles with feasible operation costs

```{r}
profiles_restricted <- cbc_restrict(
  profiles,
  # BEV range restrictions
  (powertrain == "Gasoline") & (range_bev != 0),
  (powertrain == "Hybrid") & (range_bev != 0),
  (powertrain == "Plug-in Hybrid") & (range_bev != 0),
  (powertrain == "Electric") & (range_bev < 50),
  # PHEV range restrictions
  (powertrain == "Gasoline") & (range_phev != 0),
  (powertrain == "Hybrid") & (range_phev != 0),
  (powertrain == "Electric") & (range_phev != 0),
  (powertrain == "Plug-in Hybrid") & (range_phev > 40),
  (powertrain == "Plug-in Hybrid") & (range_phev == 0),
  # Gas efficiency restrictions
  (powertrain == "gas") & (operating_cost < 9),
  (powertrain != "gas") & (operating_cost >= 18)
)


```

## Step 2: Set up priors

| Attribute | Expectation | Theory  | Suggested Sign |
|--------------|---------------|-----------|-----------|
| powertrain       | ICEV > HEV > PHEV > BEV | Concerns about battery health | Negative (−) | 
| price        | Lower price preferred   | Standard economic theory (price disutility)  |Negative (−)|
| range      | More range preferred          | Reduces range anxiety    | Positive (+)|
| mileage          | Lower mileage preferred           |Higher mileage = older/worn vehicle    |Negative (−)|
| make_year     | Newer car preferred   | Risk aversion, resale concerns    |Negative (−)|
| operating_cost | Lower cost preferred   |  Standard economic theory (price disutility) | Negative (−)|


### Fixed Parameters
```{r}
priors_fixed_parameter <- cbc_priors(
  profiles = profiles_restricted,
  # powertrain: categorical (effects coded or dummy)
  powertrain = c("bev" = -1.0, "phev" = -0.0,  "hev" = 0.5),
  price = -0.2,
  range_bev = 0.5,
  range_phev = 0.6,
  mileage = -0.5,
  make_year = -0.2,
  operating_cost = -0.3,
  no_choice = 0.5
)


# priors_fixed_parameter
```




## Step 3: Generate Designs


- **shortcut**: The "shortcut" method balances attribute level frequencies while avoiding duplicate profiles within questions

```{r}
design_rand <- cbc_design(
  profiles = profiles_restricted,
  method = 'random',
  n_resp = 4000, # Number of respondents
  n_alts = 3, # Number of alternatives per question
  n_q = 6, # Number of questions per respondent
  no_choice = TRUE,
  priors = priors_fixed_parameter
  
)
```


## Check for balance:


```{r}
cbc_inspect(design_rand)
```


## Check that counts by powertrain are even

```{r}
design_rand %>%
  tibble() %>%
  select(starts_with('power'), no_choice) %>%
  janitor::clean_names() %>%
  count(
    powertrainbev,
    powertrainphev,
    powertrainhev,
    no_choice
  )

table(design_rand$powertrainbev)
table(design_rand$powertrainphev)
table(design_rand$powertrainhev)
table(design_rand$price)
table(design_rand$range)
table(design_rand$operating_cost)
```





```{r}

#choices <- cbc_choices(design_rand)
choices_priors <- cbc_choices(design_rand, priors_fixed_parameter)

```




```{r}
model <- logitr(
  data = choices_priors, 
  outcome = 'choice', 
  obsID = 'obsID', 
  pars = c(
    'price', 'range_bev', 'range_phev', 'mileage', 'make_year', 'operating_cost',
    'powertrainbev', 'powertrainphev', 'powertrainhev'
  )
)

summary(model)

power <- cbc_power(choices_priors)


plot(power, type = "power", power_threshold = 0.9)
summary(power, power_threshold = 0.9)


```