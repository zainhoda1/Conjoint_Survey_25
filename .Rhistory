filter(time_start > '2025-08-14 14:08:00') #2025-08-14 14:08:00 # 2025-08-06 18:38:21
nrow(data)
# Drop anyone who didn't complete all choice questions
data <- data %>%
filter(!is.na(vehicle_cbc_q1_button)) %>%
filter(!is.na(vehicle_cbc_q2_button)) %>%
filter(!is.na(vehicle_cbc_q3_button)) %>%
filter(!is.na(vehicle_cbc_q4_button)) %>%
filter(!is.na(vehicle_cbc_q5_button)) %>%
filter(!is.na(vehicle_cbc_q6_button))
nrow(data)
# Drop anyone who got the demo question wrong:
data <- data %>%
filter(vehicle_cbc_q0_button == 'option_1' ) %>%
select(-vehicle_cbc_q0_button)
nrow(data)
# Drop anyone who answered the same question for all choice questions
data <- data %>%
mutate(cbc_all_same =
(vehicle_cbc_q1_button == vehicle_cbc_q2_button) &
(vehicle_cbc_q2_button == vehicle_cbc_q3_button) &
(vehicle_cbc_q3_button == vehicle_cbc_q4_button) &
(vehicle_cbc_q4_button == vehicle_cbc_q5_button) &
(vehicle_cbc_q5_button == vehicle_cbc_q6_button)
) %>%
filter(!cbc_all_same) %>%
select(-cbc_all_same)
nrow(data)
# Drop respondents who went too fast
data <- data %>%
mutate(
# Convert time to minutes
time_min_total = time_total / 60,
time_min_cbc = time_cbc_total / 60
)
# Look at summary of completion times
summary(data$time_min_total)
summary(data$time_min_cbc)
# Drop anyone who finished the choice question section in under 1 minute
data <- data %>%
filter(time_min_cbc >= 1)
nrow(data)
# Create choice data ---------
# First convert the data to long format
choice_data <- data %>%
pivot_longer(
cols = vehicle_cbc_q1_button:vehicle_cbc_q6_button,
names_to = "qID",
values_to = "choice") %>%
# Convert the qID variable and choice column to a number
mutate(
qID = parse_number(qID),
choice = parse_number(choice),
vehicle_type = case_when(
next_veh_style == 'Car / sedan / hatchback' ~ 'car',
next_veh_style == 'SUV / crossover' ~ 'suv'
)
)%>%
select(-next_veh_style)
head(choice_data)
# Read in choice questions and join it to the choice_data
survey <- read_csv(here("survey_updated_dynata", "data", "choice_questions.csv"))
c1 <- choice_data
choice_data <- choice_data %>%
left_join(survey, by = c("respID", "qID", "vehicle_type"))
View(choice_data)
# Convert choice column to 1 or 0 based on if the alternative was chosen
choice_data <- choice_data %>%
mutate(choice = ifelse(choice == altID, 1, 0))
head(choice_data)
# Create new values for respID & obsID
nRespondents <- nrow(data)
nAlts <- max(survey$altID)
nQuestions <- max(survey$qID)
choice_data$respID <- rep(seq(nRespondents), each = nAlts*nQuestions)
choice_data$obsID <- rep(seq(nRespondents*nQuestions), each = nAlts)
# Reorder columns - it's nice to have the "ID" variables first
choice_data <- choice_data %>%
select(ends_with("ID"), "choice", everything())
head(choice_data)
# Save cleaned data for modeling
write_csv(choice_data, here("code files", "modeling",  "choice_data.csv"))
# Estimate multinomial logit (MNL) models
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
# -----------------------------------------------------------------------------
# Load the data set:
data <- read_csv(here("code files", "modeling",  "choice_data.csv"))
head(data)
View(data)
# Load libraries
library(fastDummies)
library(here)
library(lubridate)
library(tidyverse)
# Change dplyr settings so I can view all columns
options(dplyr.widtkh = Inf)
# Import raw data
data_raw <- read_csv(here('Dynata Screenout Reasons', 'dynata_test_rows.csv'))
View(data_raw)
# Load libraries
library(fastDummies)
library(here)
library(lubridate)
library(tidyverse)
# Change dplyr settings so I can view all columns
options(dplyr.widtkh = Inf)
# Import raw data
data_raw <- read_csv(here('Dynata Screenout Reasons', 'dynata_test_rows.csv'))
# Format and join the three surveys -------
# Some special variables:
# session_id = a unique ID for the Run - should be the same across all surveys
# time_start = time stamp when survey was started
# time_end   = time stamp when survey ended
# time_p_*** = Time page *** was reached
# time_q_*** = Time question *** was last answered
# Compute time values for each page
data <- data_raw %>%
mutate(
# Compute time through whole survey
time_start = ymd_hms(time_start, tz = "UTC"),
time_end =  ymd_hms(time_end, tz = "UTC"),
time_total = as.numeric(time_end - time_start, units = "secs"),
# Compute time through just the cbc questions
time_p_vehicle_pageQ1_button =  ymd_hms(time_p_vehicle_pageQ1_button, tz = "UTC"),
time_p_vehicle_pageQ6_button =  ymd_hms(time_p_vehicle_pageQ6_button, tz = "UTC"),
time_cbc_total = as.numeric(time_p_vehicle_pageQ6_button - time_p_vehicle_pageQ1_button, units = "secs")
) %>%
# Select important columns
select(
session_id, time_start, time_total, time_cbc_total, respID, next_veh_budget , next_veh_style, current_page, starts_with("vehicle_cbc_q")
)
head(data)
# Filter out bad responses ---------
nrow(data)
# Drop people who got screened out
data <- data %>%
filter(!is.na(current_page),
current_page == "end") # 2025-08-07 18:38:21
nrow(data)
# Drop those who completed before the adjustments
data <- data %>%
filter(time_start > '2025-08-14 14:08:00') #2025-08-14 14:08:00 # 2025-08-06 18:38:21
nrow(data)
# Drop anyone who didn't complete all choice questions
data <- data %>%
filter(!is.na(vehicle_cbc_q1_button)) %>%
filter(!is.na(vehicle_cbc_q2_button)) %>%
filter(!is.na(vehicle_cbc_q3_button)) %>%
filter(!is.na(vehicle_cbc_q4_button)) %>%
filter(!is.na(vehicle_cbc_q5_button)) %>%
filter(!is.na(vehicle_cbc_q6_button))
nrow(data)
# Drop anyone who got the demo question wrong:
data <- data %>%
filter(vehicle_cbc_q0_button == 'option_1' ) %>%
select(-vehicle_cbc_q0_button)
nrow(data)
# Drop anyone who answered the same question for all choice questions
data <- data %>%
mutate(cbc_all_same =
(vehicle_cbc_q1_button == vehicle_cbc_q2_button) &
(vehicle_cbc_q2_button == vehicle_cbc_q3_button) &
(vehicle_cbc_q3_button == vehicle_cbc_q4_button) &
(vehicle_cbc_q4_button == vehicle_cbc_q5_button) &
(vehicle_cbc_q5_button == vehicle_cbc_q6_button)
) %>%
filter(!cbc_all_same) %>%
select(-cbc_all_same)
nrow(data)
# Drop respondents who went too fast
data <- data %>%
mutate(
# Convert time to minutes
time_min_total = time_total / 60,
time_min_cbc = time_cbc_total / 60
)
# Look at summary of completion times
summary(data$time_min_total)
summary(data$time_min_cbc)
# Drop anyone who finished the choice question section in under 1 minute
data <- data %>%
filter(time_min_cbc >= 1)
nrow(data)
# Create choice data ---------
# First convert the data to long format
choice_data <- data %>%
pivot_longer(
cols = vehicle_cbc_q1_button:vehicle_cbc_q6_button,
names_to = "qID",
values_to = "choice") %>%
# Convert the qID variable and choice column to a number
mutate(
qID = parse_number(qID),
choice = parse_number(choice),
vehicle_type = case_when(
next_veh_style == 'Car / sedan / hatchback' ~ 'car',
next_veh_style == 'SUV / crossover' ~ 'suv'
)
)%>%
select(-next_veh_style)
head(choice_data)
# Read in choice questions and join it to the choice_data
survey <- read_csv(here("survey_updated_dynata", "data", "choice_questions.csv"))
c1 <- choice_data
choice_data <- choice_data %>%
left_join(survey, by = c("respID", "qID", "vehicle_type"))
# Convert choice column to 1 or 0 based on if the alternative was chosen
choice_data <- choice_data %>%
mutate(choice = ifelse(choice == altID, 1, 0))
head(choice_data)
View(choice_data)
colnames(choice_data)
# Convert choice column to 1 or 0 based on if the alternative was chosen
choice_data <- choice_data %>%
mutate(choice = ifelse(choice == altID, 1, 0),
price = price * next_veh_budget)
head(choice_data)
View(choice_data)
# Load libraries
library(fastDummies)
library(here)
library(lubridate)
library(tidyverse)
# Change dplyr settings so I can view all columns
options(dplyr.widtkh = Inf)
# Import raw data
data_raw <- read_csv(here('Dynata Screenout Reasons', 'dynata_test_rows.csv'))
# Format and join the three surveys -------
# Some special variables:
# session_id = a unique ID for the Run - should be the same across all surveys
# time_start = time stamp when survey was started
# time_end   = time stamp when survey ended
# time_p_*** = Time page *** was reached
# time_q_*** = Time question *** was last answered
# Compute time values for each page
data <- data_raw %>%
mutate(
# Compute time through whole survey
time_start = ymd_hms(time_start, tz = "UTC"),
time_end =  ymd_hms(time_end, tz = "UTC"),
time_total = as.numeric(time_end - time_start, units = "secs"),
# Compute time through just the cbc questions
time_p_vehicle_pageQ1_button =  ymd_hms(time_p_vehicle_pageQ1_button, tz = "UTC"),
time_p_vehicle_pageQ6_button =  ymd_hms(time_p_vehicle_pageQ6_button, tz = "UTC"),
time_cbc_total = as.numeric(time_p_vehicle_pageQ6_button - time_p_vehicle_pageQ1_button, units = "secs")
) %>%
# Select important columns
select(
session_id, time_start, time_total, time_cbc_total, respID, next_veh_budget , next_veh_style, current_page, starts_with("vehicle_cbc_q")
)
head(data)
# Filter out bad responses ---------
nrow(data)
# Drop people who got screened out
data <- data %>%
filter(!is.na(current_page),
current_page == "end") # 2025-08-07 18:38:21
nrow(data)
# Drop those who completed before the adjustments
data <- data %>%
filter(time_start > '2025-08-14 14:08:00') #2025-08-14 14:08:00 # 2025-08-06 18:38:21
nrow(data)
# Drop anyone who didn't complete all choice questions
data <- data %>%
filter(!is.na(vehicle_cbc_q1_button)) %>%
filter(!is.na(vehicle_cbc_q2_button)) %>%
filter(!is.na(vehicle_cbc_q3_button)) %>%
filter(!is.na(vehicle_cbc_q4_button)) %>%
filter(!is.na(vehicle_cbc_q5_button)) %>%
filter(!is.na(vehicle_cbc_q6_button))
nrow(data)
# Drop anyone who got the demo question wrong:
data <- data %>%
filter(vehicle_cbc_q0_button == 'option_1' ) %>%
select(-vehicle_cbc_q0_button)
nrow(data)
# Drop anyone who answered the same question for all choice questions
data <- data %>%
mutate(cbc_all_same =
(vehicle_cbc_q1_button == vehicle_cbc_q2_button) &
(vehicle_cbc_q2_button == vehicle_cbc_q3_button) &
(vehicle_cbc_q3_button == vehicle_cbc_q4_button) &
(vehicle_cbc_q4_button == vehicle_cbc_q5_button) &
(vehicle_cbc_q5_button == vehicle_cbc_q6_button)
) %>%
filter(!cbc_all_same) %>%
select(-cbc_all_same)
nrow(data)
# Drop respondents who went too fast
data <- data %>%
mutate(
# Convert time to minutes
time_min_total = time_total / 60,
time_min_cbc = time_cbc_total / 60
)
# Look at summary of completion times
summary(data$time_min_total)
summary(data$time_min_cbc)
# Drop anyone who finished the choice question section in under 1 minute
data <- data %>%
filter(time_min_cbc >= 1)
nrow(data)
# Create choice data ---------
# First convert the data to long format
choice_data <- data %>%
pivot_longer(
cols = vehicle_cbc_q1_button:vehicle_cbc_q6_button,
names_to = "qID",
values_to = "choice") %>%
# Convert the qID variable and choice column to a number
mutate(
qID = parse_number(qID),
choice = parse_number(choice),
vehicle_type = case_when(
next_veh_style == 'Car / sedan / hatchback' ~ 'car',
next_veh_style == 'SUV / crossover' ~ 'suv'
)
)%>%
select(-next_veh_style)
head(choice_data)
# Read in choice questions and join it to the choice_data
survey <- read_csv(here("survey_updated_dynata", "data", "choice_questions.csv"))
c1 <- choice_data
choice_data <- choice_data %>%
left_join(survey, by = c("respID", "qID", "vehicle_type"))
# Convert choice column to 1 or 0 based on if the alternative was chosen
choice_data <- choice_data %>%
mutate(choice = ifelse(choice == altID, 1, 0),
price = price * next_veh_budget)
head(choice_data)
View(choice_data)
# Load libraries
library(fastDummies)
library(here)
library(lubridate)
library(tidyverse)
# Change dplyr settings so I can view all columns
options(dplyr.widtkh = Inf)
# Import raw data
data_raw <- read_csv(here('Dynata Screenout Reasons', 'dynata_test_rows.csv'))
# Format and join the three surveys -------
# Some special variables:
# session_id = a unique ID for the Run - should be the same across all surveys
# time_start = time stamp when survey was started
# time_end   = time stamp when survey ended
# time_p_*** = Time page *** was reached
# time_q_*** = Time question *** was last answered
# Compute time values for each page
data <- data_raw %>%
mutate(
# Compute time through whole survey
time_start = ymd_hms(time_start, tz = "UTC"),
time_end =  ymd_hms(time_end, tz = "UTC"),
time_total = as.numeric(time_end - time_start, units = "secs"),
# Compute time through just the cbc questions
time_p_vehicle_pageQ1_button =  ymd_hms(time_p_vehicle_pageQ1_button, tz = "UTC"),
time_p_vehicle_pageQ6_button =  ymd_hms(time_p_vehicle_pageQ6_button, tz = "UTC"),
time_cbc_total = as.numeric(time_p_vehicle_pageQ6_button - time_p_vehicle_pageQ1_button, units = "secs")
) %>%
# Select important columns
select(
session_id, time_start, time_total, time_cbc_total, respID, next_veh_budget , next_veh_style, current_page, starts_with("vehicle_cbc_q")
)
head(data)
# Filter out bad responses ---------
nrow(data)
# Drop people who got screened out
data <- data %>%
filter(!is.na(current_page),
current_page == "end") # 2025-08-07 18:38:21
nrow(data)
# Drop those who completed before the adjustments
data <- data %>%
filter(time_start > '2025-08-14 14:08:00') #2025-08-14 14:08:00 # 2025-08-06 18:38:21
nrow(data)
# Drop anyone who didn't complete all choice questions
data <- data %>%
filter(!is.na(vehicle_cbc_q1_button)) %>%
filter(!is.na(vehicle_cbc_q2_button)) %>%
filter(!is.na(vehicle_cbc_q3_button)) %>%
filter(!is.na(vehicle_cbc_q4_button)) %>%
filter(!is.na(vehicle_cbc_q5_button)) %>%
filter(!is.na(vehicle_cbc_q6_button))
nrow(data)
# Drop anyone who got the demo question wrong:
data <- data %>%
filter(vehicle_cbc_q0_button == 'option_1' ) %>%
select(-vehicle_cbc_q0_button)
nrow(data)
# Drop anyone who answered the same question for all choice questions
data <- data %>%
mutate(cbc_all_same =
(vehicle_cbc_q1_button == vehicle_cbc_q2_button) &
(vehicle_cbc_q2_button == vehicle_cbc_q3_button) &
(vehicle_cbc_q3_button == vehicle_cbc_q4_button) &
(vehicle_cbc_q4_button == vehicle_cbc_q5_button) &
(vehicle_cbc_q5_button == vehicle_cbc_q6_button)
) %>%
filter(!cbc_all_same) %>%
select(-cbc_all_same)
nrow(data)
# Drop respondents who went too fast
data <- data %>%
mutate(
# Convert time to minutes
time_min_total = time_total / 60,
time_min_cbc = time_cbc_total / 60
)
# Look at summary of completion times
summary(data$time_min_total)
summary(data$time_min_cbc)
# Drop anyone who finished the choice question section in under 1 minute
data <- data %>%
filter(time_min_cbc >= 1)
nrow(data)
# Create choice data ---------
# First convert the data to long format
choice_data <- data %>%
pivot_longer(
cols = vehicle_cbc_q1_button:vehicle_cbc_q6_button,
names_to = "qID",
values_to = "choice") %>%
# Convert the qID variable and choice column to a number
mutate(
qID = parse_number(qID),
choice = parse_number(choice),
vehicle_type = case_when(
next_veh_style == 'Car / sedan / hatchback' ~ 'car',
next_veh_style == 'SUV / crossover' ~ 'suv'
)
)%>%
select(-next_veh_style)
head(choice_data)
# Read in choice questions and join it to the choice_data
survey <- read_csv(here("survey_updated_dynata", "data", "choice_questions.csv"))
c1 <- choice_data
choice_data <- choice_data %>%
left_join(survey, by = c("respID", "qID", "vehicle_type"))
# Convert choice column to 1 or 0 based on if the alternative was chosen
choice_data <- choice_data %>%
mutate(choice = ifelse(choice == altID, 1, 0),
price = price * next_veh_budget)
head(choice_data)
# Create new values for respID & obsID
nRespondents <- nrow(data)
nAlts <- max(survey$altID)
nQuestions <- max(survey$qID)
choice_data$respID <- rep(seq(nRespondents), each = nAlts*nQuestions)
choice_data$obsID <- rep(seq(nRespondents*nQuestions), each = nAlts)
# Reorder columns - it's nice to have the "ID" variables first
choice_data <- choice_data %>%
select(ends_with("ID"), "choice", everything())
head(choice_data)
# Save cleaned data for modeling
write_csv(choice_data, here("code files", "modeling",  "choice_data.csv"))
View(choice_data)
# Estimate multinomial logit (MNL) models
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
# -----------------------------------------------------------------------------
# Load the data set:
data <- read_csv(here("code files", "modeling",  "choice_data.csv"))
head(data)
colnames(data)
View(data)
summary(data)
# First create some dummy coded variables for categorical variables
data <- dummy_cols(data, c('powertrain', 'vehicle_type'))
# Clean up names of created variables
data <- clean_names(data)
colnames(data)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files", "modeling",  "choice_data.csv"))
head(data)
# First create some dummy coded variables for categorical variables
data <- dummy_cols(data, c('powertrain'))
# Clean up names of created variables
data <- clean_names(data)
# Estimate the model
model <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"price",
"powertrain_conventional", "powertrain_battery_electric",
"powertrain_gas_hybrid", "powertrain_plug_in_hybrid")
)
# View summary of results
summary(model)
# Check the 1st order condition: Is the gradient at the solution zero?
model$gradient
# 2nd order condition: Is the hessian negative definite?
# (If all the eigenvalues are negative, the hessian is negative definite)
eigen(model$hessian)$values
