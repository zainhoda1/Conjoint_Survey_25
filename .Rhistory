#   method = "random", # randomized full-factorial design
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6    # Number of questions per respondent #6
# )
design_random_fixed_parameter <- cbc_design(
profiles = profiles,
priors = priors_fixed,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
remove_dominant = TRUE,
no_choice = TRUE
)
# Chunk 1: setup
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
# Chunk 2
profiles <- cbc_profiles(
veh_mileage        = seq(1.5, 5, 0.5), # unit: 10000
veh_price          = seq(0.8, 1.1, 0.1), # unit: 20000
battery_refurbish  = c('original', 'cellreplace','packreplace'),
battery_range_year0 = seq(2, 3.6, 0.4), # unit: 100
battery_degradation = seq(1, 8, 1) # %
)
profiles
# Chunk 3
# Chunk 4
priors_fixed <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price            = -0.1,      # Each $20000 increase reduces utility by 0.1
battery_refurbish = c(-1.0, -0.5),   # Cell refurbishment least preferred
battery_range_year0  = 0.5,         # Each 100 mile of range adds utility by 0.5
battery_degradation  = -0.5         # Each 1% of degradation increases subtracts utility by 0.5
)
priors_fixed
# Chunk 5
priors_random_parameter <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price = -0.1, # Assume $1,000 price increase = -0.1 utility
battery_refurbish = rand_spec("n", c(-1.0, -0.5), c(0.1, 0.1)), # Reference = "original"
battery_range_year0 = 0.5,   # Each 100 mile of range adds utility by 0.5
battery_degradation = -0.5 # 1% increase in degradation = -1 utility
)
priors_random_parameter
# Chunk 6
# design_random <- cbc_design(
#   profiles = profiles,
#   # priors = priors_fixed,
#   method = "random", # randomized full-factorial design
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6    # Number of questions per respondent #6
# )
design_random_fixed_parameter <- cbc_design(
profiles = profiles,
priors = priors_fixed,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
remove_dominant = TRUE
)
design_random_random_parameter <- cbc_design(
profiles = profiles,
priors = priors_random_parameter,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
remove_dominant = TRUE
)
# Chunk 7
# design_shortcut <- cbc_design(
#   profiles = profiles,
#   method = "shortcut",
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6    # Number of questions per respondent #6
#
# )
#
# design_shortcut_fixed_parameter <- cbc_design(
#   profiles = profiles,
#   priors = priors_fixed,
#   method = "shortcut",
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6   # Number of questions per respondent #6
# )
## Code will not run
# design_shortcut_fixed_parameter_remove_dominant <- cbc_design(
#   profiles = profiles,
#   priors = priors_fixed,
#   method = "shortcut",
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6,   # Number of questions per respondent #6
#   remove_dominant = TRUE
# )
# Chunk 8
cbc_compare(
"Random_fixed_parameter" = design_random_fixed_parameter,
"Random_random_parameter" = design_random_random_parameter
# "Shortcut" = design_shortcut,
# "Shortcut_fixed_parameter" = design_shortcut_fixed_parameter
)
# Chunk 9
# cbc_inspect(design_random)
cbc_inspect(design_random_fixed_parameter)
# Chunk 10
cbc_inspect(design_random_random_parameter)
# Chunk 11
# cbc_inspect(design_shortcut)
# Chunk 12
# cbc_inspect(design_shortcut_fixed_parameter)
# Chunk 13
choices_random_fixed_parameter <- cbc_choices(design_random_fixed_parameter, priors = priors_fixed)
choices_random_random_parameter <- cbc_choices(design_random_random_parameter, priors = priors_random_parameter)
# choices_shortcut <- cbc_choices(design_shortcut)
# choices_shortcut_fixed_parameter <- cbc_choices(design_shortcut_fixed_parameter,priors = priors_fixed)
# Chunk 14
choices_cat <- cbc_decode(choices_random_fixed_parameter)
# Filter for the chosen rows only
choices_cat <- choices_cat[which(choices_cat$choice == 1), ]
# Counts of choices made for each attribute level
table(choices_cat$veh_mileage)
table(choices_cat$veh_price)
table(choices_cat$battery_refurbish)
table(choices_cat$battery_range_year0)
table(choices_cat$battery_degradation)
# Chunk 15
choices_cat <- cbc_decode(choices_random_random_parameter)
# Filter for the chosen rows only
choices_cat <- choices_cat[which(choices_cat$choice == 1), ]
# Counts of choices made for each attribute level
table(choices_cat$veh_mileage)
table(choices_cat$veh_price)
table(choices_cat$battery_refurbish)
table(choices_cat$battery_range_year0)
table(choices_cat$battery_degradation)
# Chunk 16
# choices_cat <- cbc_decode(choices_shortcut)
#
# # Filter for the chosen rows only
# choices_cat <- choices_cat[which(choices_cat$choice == 1), ]
#
# # Counts of choices made for each attribute level
# table(choices_cat$veh_mileage)
# table(choices_cat$veh_price)
# table(choices_cat$battery_refurbish)
# table(choices_cat$battery_range_year0)
# table(choices_cat$battery_degradation)
# Chunk 17
# choices_cat_fixed_parameter <- cbc_decode(choices_shortcut_fixed_parameter)
#
# # Filter for the chosen rows only
# choices_cat <- choices_cat[which(choices_cat$choice == 1), ]
#
# # Counts of choices made for each attribute level
# table(choices_cat$veh_mileage)
# table(choices_cat$veh_price)
# table(choices_cat$battery_refurbish)
# table(choices_cat$battery_range_year0)
# table(choices_cat$battery_degradation)
# Chunk 18
power_random_fixed_parameter <- cbc_power(
data=choices_random_fixed_parameter,
outcome = "choice",
obsID = "obsID",
n_q = 6,
n_breaks = 10
)
plot(power_random_fixed_parameter, type = "power", power_threshold = 0.9)
plot(power_random_fixed_parameter, type = "se")
summary(power_random_fixed_parameter, power_threshold = 0.9)
# Chunk 19
power_random_random_parameter <- cbc_power(
data=choices_random_random_parameter,
outcome = "choice",
obsID = "obsID",
n_q = 6,
n_breaks = 10)
plot(power_random_random_parameter, type = "power", power_threshold = 0.9)
plot(power_random_random_parameter, type = "se")
summary(power_random_random_parameter, power_threshold = 0.9)
# Chunk 20
# power_shortcut <- cbc_power(
#   data=choices_shortcut,
#   outcome = "choice",
#   obsID = "obsID",
#   n_q = 6,
#   n_breaks = 10)
#
# plot(power_shortcut, type = "power", power_threshold = 0.9)
# plot(power_shortcut, type = "se", power_threshold = 0.9)
# summary(power_shortcut, power_threshold = 0.9)
# Chunk 21
# power_shortcut_fixed_parameter <- cbc_power(
#   data=choices_shortcut_fixed_parameter,
#   outcome = "choice",
#   obsID = "obsID",
#   n_q = 6,
#   n_breaks = 10)
#
# plot(power_shortcut_fixed_parameter, type = "power", power_threshold = 0.9)
# plot(power_shortcut_fixed_parameter, type = "se", power_threshold = 0.9)
# summary(power_shortcut_fixed_parameter, power_threshold = 0.9)
# Chunk 22
plot_compare_power(
random_fixed_parameter = power_random_fixed_parameter,
random_random_parameter = power_random_random_parameter,
# shortcut = power_shortcut,
# shortcut_fixed_parameter = power_shortcut_fixed_parameter,
type = "power"
)
plot_compare_power(
random_fixed_parameter = power_random_fixed_parameter,
random_random_parameter = power_random_random_parameter,
# shortcut = power_shortcut,
# shortcut_fixed_parameter = power_shortcut_fixed_parameter,
type = "se"
)
design_random_fixed_parameter_origin<-design_random_fixed_parameter
View(design_random_fixed_parameter_origin)
design_random_fixed_parameter<-cbc_decode(design_random_fixed_parameter)
View(design_random_fixed_parameter)
# Chunk 1: setup
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
# Chunk 2
profiles <- cbc_profiles(
veh_mileage        = seq(1.5, 5, 0.5), # unit: 10000
veh_price          = seq(0.8, 1.1, 0.1), # unit: 20000
battery_refurbish  = c('original', 'cellreplace','packreplace'),
battery_range_year0 = seq(2, 3.6, 0.4), # unit: 100
battery_degradation = seq(1, 8, 1) # %
)
profiles
# Chunk 3
# Chunk 4
priors_fixed <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price            = -0.1,      # Each $20000 increase reduces utility by 0.1
battery_refurbish = c(-1.0, -0.5),   # Cell refurbishment least preferred
battery_range_year0  = 0.5,         # Each 100 mile of range adds utility by 0.5
battery_degradation  = -0.5,          # Each 1% of degradation increases subtracts utility by 0.5
no_choice = 1.0                      # There is a strong negative preference for EV, so positive for "no_choice"
)
priors_fixed
# Chunk 5
priors_random_parameter <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price = -0.1, # Assume $1,000 price increase = -0.1 utility
battery_refurbish = rand_spec("n", c(-1.0, -0.5), c(0.1, 0.1)), # Reference = "original"
battery_range_year0 = 0.5,   # Each 100 mile of range adds utility by 0.5
battery_degradation = -0.5, # 1% increase in degradation = -1 utility
no_choice = 1.0            # There is a strong negative preference for EV, so positive for "no_choice"
)
priors_random_parameter
# Chunk 6
design_random <- cbc_design(
profiles = profiles,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
no_choice = TRUE
)
design_random_fixed_parameter <- cbc_design(
profiles = profiles,
priors = priors_fixed,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
#remove_dominant = TRUE,
no_choice = TRUE
)
design_random_random_parameter <- cbc_design(
profiles = profiles,
priors = priors_random_parameter,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
#remove_dominant = TRUE,
no_choice = TRUE
)
# Chunk 7
# design_shortcut <- cbc_design(
#   profiles = profiles,
#   method = "shortcut",
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6    # Number of questions per respondent #6
#
# )
#
# design_shortcut_fixed_parameter <- cbc_design(
#   profiles = profiles,
#   priors = priors_fixed,
#   method = "shortcut",
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6   # Number of questions per respondent #6
# )
## Code will not run
# design_shortcut_fixed_parameter_remove_dominant <- cbc_design(
#   profiles = profiles,
#   priors = priors_fixed,
#   method = "shortcut",
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6,   # Number of questions per respondent #6
#   remove_dominant = TRUE
# )
# Chunk 8
cbc_compare(
"Random"= design_random,
"Random_fixed_parameter" = design_random_fixed_parameter,
"Random_random_parameter" = design_random_random_parameter
# "Shortcut" = design_shortcut,
# "Shortcut_fixed_parameter" = design_shortcut_fixed_parameter
)
# Chunk 9
cbc_inspect(design_random)
# Chunk 10
# cbc_inspect(design_random)
cbc_inspect(design_random_fixed_parameter)
# Chunk 11
cbc_inspect(design_random_random_parameter)
# Chunk 12
# cbc_inspect(design_shortcut)
# Chunk 13
# cbc_inspect(design_shortcut_fixed_parameter)
# Chunk 14
choices_random_fixed_parameter <- cbc_choices(design_random_fixed_parameter, priors = priors_fixed)
choices_random_random_parameter <- cbc_choices(design_random_random_parameter, priors = priors_random_parameter)
# choices_shortcut <- cbc_choices(design_shortcut)
# choices_shortcut_fixed_parameter <- cbc_choices(design_shortcut_fixed_parameter,priors = priors_fixed)
# Chunk 15
choices_cat <- cbc_decode(choices_random_fixed_parameter %>%
select (-no_choice))
# Filter for the chosen rows only
choices_cat <- choices_cat[which(choices_cat$choice == 1), ]
# Counts of choices made for each attribute level
table(choices_cat$veh_mileage)
table(choices_cat$veh_price)
table(choices_cat$battery_refurbish)
table(choices_cat$battery_range_year0)
table(choices_cat$battery_degradation)
# Chunk 16
choices_cat <- cbc_decode(choices_random_random_parameter  %>%
select (-no_choice))
# Filter for the chosen rows only
choices_cat <- choices_cat[which(choices_cat$choice == 1), ]
# Counts of choices made for each attribute level
table(choices_cat$veh_mileage)
table(choices_cat$veh_price)
table(choices_cat$battery_refurbish)
table(choices_cat$battery_range_year0)
table(choices_cat$battery_degradation)
# Chunk 17
# choices_cat <- cbc_decode(choices_shortcut)
#
# # Filter for the chosen rows only
# choices_cat <- choices_cat[which(choices_cat$choice == 1), ]
#
# # Counts of choices made for each attribute level
# table(choices_cat$veh_mileage)
# table(choices_cat$veh_price)
# table(choices_cat$battery_refurbish)
# table(choices_cat$battery_range_year0)
# table(choices_cat$battery_degradation)
# Chunk 18
# choices_cat_fixed_parameter <- cbc_decode(choices_shortcut_fixed_parameter)
#
# # Filter for the chosen rows only
# choices_cat <- choices_cat[which(choices_cat$choice == 1), ]
#
# # Counts of choices made for each attribute level
# table(choices_cat$veh_mileage)
# table(choices_cat$veh_price)
# table(choices_cat$battery_refurbish)
# table(choices_cat$battery_range_year0)
# table(choices_cat$battery_degradation)
# Chunk 19
power_random_fixed_parameter <- cbc_power(
data=choices_random_fixed_parameter,
outcome = "choice",
obsID = "obsID",
n_q = 6,
n_breaks = 10
)
plot(power_random_fixed_parameter, type = "power", power_threshold = 0.9)
plot(power_random_fixed_parameter, type = "se")
summary(power_random_fixed_parameter, power_threshold = 0.9)
# Chunk 20
power_random_random_parameter <- cbc_power(
data=choices_random_random_parameter,
outcome = "choice",
obsID = "obsID",
n_q = 6,
n_breaks = 10)
plot(power_random_random_parameter, type = "power", power_threshold = 0.9)
plot(power_random_random_parameter, type = "se")
summary(power_random_random_parameter, power_threshold = 0.9)
# Chunk 21
# power_shortcut <- cbc_power(
#   data=choices_shortcut,
#   outcome = "choice",
#   obsID = "obsID",
#   n_q = 6,
#   n_breaks = 10)
#
# plot(power_shortcut, type = "power", power_threshold = 0.9)
# plot(power_shortcut, type = "se", power_threshold = 0.9)
# summary(power_shortcut, power_threshold = 0.9)
# Chunk 22
# power_shortcut_fixed_parameter <- cbc_power(
#   data=choices_shortcut_fixed_parameter,
#   outcome = "choice",
#   obsID = "obsID",
#   n_q = 6,
#   n_breaks = 10)
#
# plot(power_shortcut_fixed_parameter, type = "power", power_threshold = 0.9)
# plot(power_shortcut_fixed_parameter, type = "se", power_threshold = 0.9)
# summary(power_shortcut_fixed_parameter, power_threshold = 0.9)
# Chunk 23
plot_compare_power(
random_fixed_parameter = power_random_fixed_parameter,
random_random_parameter = power_random_random_parameter,
# shortcut = power_shortcut,
# shortcut_fixed_parameter = power_shortcut_fixed_parameter,
type = "power"
)
plot_compare_power(
random_fixed_parameter = power_random_fixed_parameter,
random_random_parameter = power_random_random_parameter,
# shortcut = power_shortcut,
# shortcut_fixed_parameter = power_shortcut_fixed_parameter,
type = "se"
)
design_random_fixed_parameter_origin<-design_random_fixed_parameter
View(design_random_fixed_parameter_origin)
design_random_fixed_parameter<-cbc_decode(design_random_fixed_parameter %>% select(-no_choice))
View(design_random_fixed_parameter)
design_random_fixed_parameter<-cbc_decode(design_random_fixed_parameter)
View(design_random_fixed_parameter_origin)
design_random_fixed_parameter <- design_random_fixed_parameter_origin %>% select(-no_choice)
design_random_fixed_parameter<-cbc_decode(design_random_fixed_parameter)
design_random_fixed_parameter <- cbc_design(
profiles = profiles,
priors = priors_fixed,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
#remove_dominant = TRUE,
no_choice = TRUE
)
design_random_fixed_parameter_origin<-design_random_fixed_parameter
View(design_random_fixed_parameter_origin)
#design_random_fixed_parameter <- design_random_fixed_parameter %>% select(-no_choice)
design_random_fixed_parameter<-cbc_decode(design_random_fixed_parameter)
?cbc_decode
surveydown::sd_db_config()
shiny::runApp('survey_updated_pretest')
battery_survey <- read_csv(here('data', 'battery_choice_questions.csv'))
View(battery_survey)
View(battery_survey)
#battery_survey <- read_csv(here('data', 'battery_choice_questions.csv'))
battery_survey <- read_csv(here('data', 'battery_choice_questions_testing_zain.csv'))
View(battery_survey)
battery_survey1 <- read_csv(here('data', 'battery_choice_questions.csv'))
View(battery_survey1)
View(battery_survey)
runApp('survey_updated_pretest')
runApp('survey_updated_pretest')
