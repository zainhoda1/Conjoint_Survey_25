battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Clean up names of created variables
data <- clean_names(data)
# For character columns, replace NA with "0" (as a string)
data[is.na(data) & sapply(data, is.character)] <- "0"
# For numeric columns, replace NA with 0 (as a number)
data[is.na(data) & sapply(data, is.numeric)] <- 0
data$battery_refurbish[is.na(data$battery_refurbish)] <- "0"
data$battery_refurbish[is.na(data$battery_refurbish)] <- '0'
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
veh_price = veh_price/10000, # 0.5 - 6
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Clean up names of created variables
data <- clean_names(data)
# For character columns, replace NA with "0" (as a string)
data[is.na(data) & sapply(data, is.character)] <- '0'
# For numeric columns, replace NA with 0 (as a number)
data[is.na(data) & sapply(data, is.numeric)] <- 0
data$battery_refurbish[is.na(data$battery_refurbish)] <- '0'
glimpse(data)
glimpse(data)
# For character columns, replace NA with "0" (as a string)
#data[is.na(data) & sapply(data, is.character)] <- '0'
# For numeric columns, replace NA with 0 (as a number)
data[is.na(data) & sapply(data, is.numeric)] <- 0
source("D:/Spring 2025/Conjoint_Survey_25/code files/old code/testing_initial_data_modeling/simple_logit_model_battery.R", echo=TRUE)
data <- data %>%
select(-battery_cbc_q0_button)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
veh_price = veh_price/10000, # 0.5 - 6
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Clean up names of created variables
data <- clean_names(data)
data <- data %>%
select(-battery_cbc_q0_button)
data$battery_refurbish[is.na(data$battery_refurbish)] <- '0'
# For character columns, replace NA with "0" (as a string)
#data[is.na(data) & sapply(data, is.character)] <- '0'
# For numeric columns, replace NA with 0 (as a number)
data[is.na(data) & sapply(data, is.numeric)] <- 0
data[is.na(data)] <- 0
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
veh_price = veh_price/10000, # 0.5 - 6
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Clean up names of created variables
data <- clean_names(data)
data <- data %>%
select(-battery_cbc_q0_button, -battery_condition)
data$battery_refurbish[is.na(data$battery_refurbish)] <- '0'
data[is.na(data)] <- 0
glimpse(data)
# Estimate the model
model1 <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbish",
# "battery_refurbishpackreplace",
"battery_range_year3",
"battery_range_year8" ,
"no_choice"
)
)
# View summary of results
summary(model1)
# View summary of results
summary(model1)
# Estimate the model
model2 <- logitr(
data    = data ,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbish",
"battery_range_year0",
"battery_degradation",
"no_choice"
)
)
# View summary of results
summary(model2)
# Check the 1st order condition: Is the gradient at the solution zero?
model$gradient
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
veh_price = veh_price/10000, # 0.5 - 6
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Clean up names of created variables
data <- clean_names(data)
data <- data %>%
select(-battery_cbc_q0_button, -battery_condition)
data$battery_refurbish[is.na(data$battery_refurbish)] <- '0'
data[is.na(data)] <- 0
glimpse(data)
# Estimate the model
model1 <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbish",
# "battery_refurbishpackreplace",
"battery_range_year3",
"battery_range_year8" ,
"no_choice"
)
)
# View summary of results
summary(model1)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
veh_price = veh_price/10000, # 0.5 - 6
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Clean up names of created variables
data <- clean_names(data)
data <- data %>%
select(-battery_cbc_q0_button, -battery_condition)
data$battery_refurbish[is.na(data$battery_refurbish)] <- '0'
data[is.na(data)] <- 0
glimpse(data)
# Estimate the model
model1 <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbish",
# "battery_refurbishpackreplace",
"battery_range_year3",
"battery_range_year8" ,
"no_choice"
)
)
# View summary of results
summary(model1)
# Check the 1st order condition: Is the gradient at the solution zero?
model1$gradient
# 2nd order condition: Is the hessian negative definite?
# (If all the eigenvalues are negative, the hessian is negative definite)
eigen(model$hessian)$values
# Estimate the model
model2 <- logitr(
data    = data ,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbish",
"battery_range_year0",
"battery_degradation",
"no_choice"
)
)
# View summary of results
summary(model2)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
veh_price = veh_price/10000, # 0.5 - 6
battery_range_year0 = battery_range_year0 /100, # 1-3
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Clean up names of created variables
data <- clean_names(data)
data <- data %>%
select(-battery_cbc_q0_button, -battery_condition)
data$battery_refurbish[is.na(data$battery_refurbish)] <- '0'
data[is.na(data)] <- 0
glimpse(data)
# Estimate the model
model1 <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbish",
# "battery_refurbishpackreplace",
"battery_range_year3",
"battery_range_year8" ,
"no_choice"
)
)
# View summary of results
summary(model1)
# Check the 1st order condition: Is the gradient at the solution zero?
model1$gradient
# 2nd order condition: Is the hessian negative definite?
# (If all the eigenvalues are negative, the hessian is negative definite)
eigen(model$hessian)$values
# Estimate the model
model2 <- logitr(
data    = data ,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbish",
"battery_range_year0",
"battery_degradation",
"no_choice"
)
)
# View summary of results
summary(model2)
# Load libraries
library(fastDummies)
library(here)
library(lubridate)
library(tidyverse)
library(arrow)
# Change dplyr settings so I can view all columns
options(dplyr.widtkh = Inf)
data_raw <- read_csv(here("code files","old code", "testing_initial_data_modeling", "survey_data.csv"))
survey <- read_parquet(here("code files","old code", "testing_initial_data_modeling", 'design_battery.parquet'))
# removing testing entries
data_raw <- data_raw %>%
filter(!is.na(psid), nchar(psid) >= 10)
# Compute time values for each page
data <- data_raw %>%
mutate(
# Compute time through whole survey
time_start = ymd_hms(time_start, tz = "UTC"),
time_end =  ymd_hms(time_end, tz = "UTC"),
time_total = as.numeric(time_end - time_start, units = "secs"),
# Compute time through just the cbc questions
time_p_battery_pageQ1_button =  ymd_hms(time_p_battery_pageQ1_button, tz = "UTC"),
time_p_battery_pageQ6_button =  ymd_hms(time_p_battery_pageQ6_button, tz = "UTC"),
time_cbc_total = as.numeric(time_p_battery_pageQ6_button - time_p_battery_pageQ1_button, units = "secs")
) %>%
# Select important columns
select(
session_id, time_start, time_total, time_cbc_total, battery_respID, next_veh_budget , next_veh_style, current_page, starts_with("battery_cbc_q")
)
head(data)
nrow(data)
# Drop people who got screened out
data <- data %>%
filter(!is.na(current_page),
current_page == "end") # 2025-08-07 18:38:21
nrow(data)
# Drop those who completed before the adjustments
data <- data %>%
filter(time_start > '2025-10-14 00:00:00') #2025-08-14 14:08:00 # 2025-08-06 18:38:21
nrow(data)
# Drop anyone who didn't complete all choice questions
data <- data %>%
filter(!is.na(battery_cbc_q1_button)) %>%
filter(!is.na(battery_cbc_q2_button)) %>%
filter(!is.na(battery_cbc_q3_button)) %>%
filter(!is.na(battery_cbc_q4_button)) %>%
filter(!is.na(battery_cbc_q5_button))  %>%
filter(!is.na(battery_cbc_q6_button))
nrow(data)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files", "old code", "testing_initial_data_modeling",  "vehicle_choice_data.csv"))
head(data)
glimpse(data)
data <- data %>%
#select(price, mileage, age, operating_cost, )
mutate(price = price/10000,  # 0.5-6
range_bev = range_bev/100,  # 0.5 - 2.5
range_phev = range_phev /10,  # 1 - 4
mileage = mileage * 10,  # 2 - 6
age = age * 10, # 2 - 8
operating_cost = operating_cost/10 # 0.3 - 2.5
)
# Clean up names of created variables
data <- clean_names(data)
# Estimate the model
model <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"price",
"mileage",
"age",
"operating_cost",
"range_bev",
"range_phev",
"powertrainbev",
"powertrainphev",
"powertrainhev",
"no_choice"
)
)
glimpse(data)
data <- data %>%
select(-range, -operating_cost_text)
data$battery_refurbish[is.na(data$battery_refurbish)] <- '0'
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files", "old code", "testing_initial_data_modeling",  "vehicle_choice_data.csv"))
head(data)
glimpse(data)
data <- data %>%
#select(price, mileage, age, operating_cost, )
mutate(price = price/10000,  # 0.5-6
range_bev = range_bev/100,  # 0.5 - 2.5
range_phev = range_phev /10,  # 1 - 4
mileage = mileage * 10,  # 2 - 6
age = age * 10, # 2 - 8
operating_cost = operating_cost/10 # 0.3 - 2.5
)
data <- data %>%
select(-range, -operating_cost_text)
data[is.na(data)] <- 0
data <- data %>%
select(-range, -operating_cost_text, -powertrain)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files", "old code", "testing_initial_data_modeling",  "vehicle_choice_data.csv"))
head(data)
glimpse(data)
data <- data %>%
#select(price, mileage, age, operating_cost, )
mutate(price = price/10000,  # 0.5-6
range_bev = range_bev/100,  # 0.5 - 2.5
range_phev = range_phev /10,  # 1 - 4
mileage = mileage * 10,  # 2 - 6
age = age * 10, # 2 - 8
operating_cost = operating_cost/10 # 0.3 - 2.5
)
data <- data %>%
select(-range, -operating_cost_text, -powertrain)
data[is.na(data)] <- 0
# Clean up names of created variables
data <- clean_names(data)
# Estimate the model
model <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"price",
"mileage",
"age",
"operating_cost",
"range_bev",
"range_phev",
"powertrainbev",
"powertrainphev",
"powertrainhev",
"no_choice"
)
)
# View summary of results
summary(model)
# Check the 1st order condition: Is the gradient at the solution zero?
model$gradient
glimpse(data)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files", "old code", "testing_initial_data_modeling",  "vehicle_choice_data.csv"))
head(data)
glimpse(data)
data <- data %>%
#select(price, mileage, age, operating_cost, )
mutate(price = price/10000,  # 0.5-6
range_bev = range_bev/100,  # 0.5 - 2.5
range_phev = range_phev /10,  # 1 - 4
mileage = mileage * 10,  # 2 - 6
age = age * 10, # 2 - 8
operating_cost = operating_cost/10 # 0.3 - 2.5
)
data <- data %>%
select(-range, -operating_cost_text, -powertrain)
data[is.na(data)] <- 0
# Clean up names of created variables
data <- clean_names(data)
# Estimate the model
model <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"price",
"mileage",
"age",
"operating_cost",
"range_bev",
"range_phev",
"powertrainbev",
"powertrainphev",
"powertrainhev",
"no_choice"
)
)
# View summary of results
summary(model)
