# Load libraries
library(cbcTools)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)


profiles <- cbc_profiles(
  veh_mileage        = seq(1.5, 5, 0.5), # unit: 10000
  veh_price          = seq(0.8, 1.1, 0.1), # unit: 20000
  battery_refurbish  = c('original', 'cellreplace','packreplace'),
  battery_range_year0 = seq(2, 3.6, 0.4), # unit: 100
  battery_degradation = seq(1, 8, 1) # %
)

priors_fixed <- cbc_priors(
  profiles = profiles,
  veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
  veh_price            = -0.1,      # Each $20000 increase reduces utility by 0.1
  battery_refurbish = c(-1.0, -0.5),   # Cell refurbishment least preferred
  battery_range_year0  = 0.5,         # Each 100 mile of range adds utility by 0.5
  battery_degradation  = -0.5,         # Each 1% of degradation increases subtracts utility by 0.5
  no_choice = 1.0                      # There is a strong negative preference for EV, so positive for "no_choice"
)
design_random_fixed_parameter <- cbc_design(
  profiles = profiles,
  priors = priors_fixed,
  method = "random", # randomized full-factorial design
  n_resp   = 3000, # Number of respondents
  n_alts   = 3,    # Number of alternatives per question
  n_q      = 6,    # Number of questions per respondent #6
  no_choice = TRUE,
  remove_dominant = FALSE
) 

cbc_inspect(design_random_fixed_parameter)


#design_random_fixed_parameter_origin<-design_random_fixed_parameter
#design_random_fixed_parameter<-cbc_decode(design_random_fixed_parameter)

design_rand_output <-design_random_fixed_parameter %>%
  mutate(veh_mileage = veh_mileage*10000,
         battery_degradation=battery_degradation/100,
         battery_range_year0=battery_range_year0*100) %>% 
  mutate(battery_health_year0=paste0(round(1 * 100, 0), "%"),
         battery_health_year3=(1-battery_degradation)^3,
         battery_health_year8=(1-battery_degradation)^8,# round to the closest 5
         battery_range_year3=round(battery_range_year0*battery_health_year3/5)*5,
         battery_range_year8=round(battery_range_year0*battery_health_year8/5)*5,
         battery_health_year3=paste0(round((1-battery_degradation)^3*100,0),"%"),
         battery_health_year8=paste0(round((1-battery_degradation)^8*100,0),"%")
         ) %>% 
  mutate(battery_condition = case_when(
    battery_refurbishcellreplace == 1 ~ 'Refurbished Cell-Replaced',
    battery_refurbishpackreplace == 1 ~ 'Refurbished Pack-Replaced',
    ((battery_refurbishcellreplace == 0) &
      (battery_refurbishcellreplace == 0) &
      (no_choice == 0)) ~ 'Original Battery' ,
    TRUE ~ NA
  ))

cbc_inspect(design_random_fixed_parameter)
# head(design_random_fixed_parameter)

#write.csv(design_rand_output, paste0(here("..",".."),"/survey_updated_pretest/data/battery_choice_questions.csv"), row.names = FALSE)

write.csv(design_rand_output, here('survey_updated_dynata', 'data', 'battery_choice_questions_testing_zain.csv'))
