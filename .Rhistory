data <- data %>%
filter(!is.na(battery_cbc_q1_button)) %>%
filter(!is.na(battery_cbc_q2_button)) %>%
filter(!is.na(battery_cbc_q3_button)) %>%
filter(!is.na(battery_cbc_q4_button)) %>%
filter(!is.na(battery_cbc_q5_button))  %>%
filter(!is.na(battery_cbc_q6_button))
nrow(data)
# Drop anyone who answered the same question for all choice questions
data <- data %>%
mutate(cbc_all_same =
(battery_cbc_q1_button == battery_cbc_q2_button) &
(battery_cbc_q2_button == battery_cbc_q3_button) &
(battery_cbc_q3_button == battery_cbc_q4_button) &
(battery_cbc_q4_button == battery_cbc_q5_button) &
(battery_cbc_q5_button == battery_cbc_q6_button)
) %>%
filter(!cbc_all_same) %>%
select(-cbc_all_same)
nrow(data)
# Drop respondents who went too fast
data <- data %>%
mutate(
# Convert time to minutes
time_min_total = time_total / 60,
time_min_cbc = time_cbc_total / 60
)
# Look at summary of completion times
summary(data$time_min_total)
summary(data$time_min_cbc)
# Drop anyone who finished the choice question section in under 1 minute
data <- data %>%
filter(time_min_cbc >= 1)
nrow(data)
data <- data %>%
distinct(battery_respID, .keep_all = TRUE)
# First convert the data to long format
choice_data <- data %>%
pivot_longer(
cols = battery_cbc_q1_button:battery_cbc_q6_button,
names_to = "qID",
values_to = "choice") %>%
# Convert the qID variable and choice column to a number
mutate(
qID = parse_number(qID),
choice = parse_number(choice),
# vehicle_type = case_when(
#   next_veh_style == 'Car / sedan / hatchback' ~ 'car',
#   next_veh_style == 'SUV / crossover' ~ 'suv'
# )
) #%>%
head(choice_data)
# Read in choice questions and join it to the choice_data
#survey <- read_csv(here("survey_updated_dynata", "data", "battery_choice_questions.csv"))
survey <- read_parquet(here('survey','data', 'design_battery.parquet'))
choice_data <- choice_data %>%
left_join(survey, by = c("battery_respID" = "respID", "qID"))
# Convert choice column to 1 or 0 based on if the alternative was chosen
choice_data <- choice_data %>%
mutate(choice = ifelse(choice == altID, 1, 0),
veh_price = veh_price * next_veh_budget)
head(choice_data)
# Create new values for respID & obsID
nRespondents <- nrow(data)
nAlts <- max(survey$altID)
nQuestions <- max(survey$qID)
choice_data$respID <- rep(seq(nRespondents), each = nAlts*nQuestions)
choice_data$obsID <- rep(seq(nRespondents*nQuestions), each = nAlts)
# Reorder columns - it's nice to have the "ID" variables first
choice_data <- choice_data %>%
select(ends_with("ID"), "choice", everything())
head(choice_data)
# Save cleaned data for modeling
write_csv(choice_data, here("code files", "old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
View(choice_data)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
head(data)
glimpse(data)
glimpse(data)
glimpse(data)
unique(data$next_veh_budget)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
next_veh_budget = next_veh_budget/10000, # 0.5 - 6
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Clean up names of created variables
data <- clean_names(data)
temp <- data %>%
count(resp_id)
View(temp)
glimpse(data)
# Estimate the model
model1 <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"next_veh_budget",
"battery_refurbishcellreplace",
"battery_refurbishpackreplace",
"battery_range_year3",
"battery_range_year8"
)
)
# View summary of results
summary(model1)
unique(data$next_veh_budget)
unique(data$veh_price)
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
veh_price = veh_price/10000, # 0.5 - 6
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Clean up names of created variables
data <- clean_names(data)
glimpse(data)
# Estimate the model
model1 <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbishcellreplace",
"battery_refurbishpackreplace",
"battery_range_year3",
"battery_range_year8"
)
)
# View summary of results
summary(model1)
# Estimate the model
model2 <- logitr(
data    = data
,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbishcellreplace",
"battery_refurbishpackreplace",
"battery_range_year0",
"battery_degradation"
)
)
# View summary of results
summary(model2)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files", "old code", "testing_initial_data_modeling",  "vehicle_choice_data.csv"))
head(data)
glimpse(data)
data <- data %>%
#select(price, mileage, age, operating_cost, )
mutate(price = price/10000,  # 0.5-6
range_bev = range_bev/100,  # 0.5 - 2.5
range_phev = range_phev /10,  # 1 - 4
mileage = mileage * 10,  # 2 - 6
age = age * 10, # 2 - 8
operating_cost = operating_cost/10 # 0.3 - 2.5
)
# Clean up names of created variables
data <- clean_names(data)
# Estimate the model
model <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"price",
"mileage",
"age",
"operating_cost",
"range_bev",
"range_phev",
"powertrainbev",
"powertrainhev",
"powertrainphev"
)
)
# View summary of results
summary(model)
unique(data$price)
# Estimate multinomial logit (MNL) models
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
# -----------------------------------------------------------------------------
# Load the data set:
data <- read_csv(here("code files", "old code", "testing_initial_data_modeling",  "vehicle_choice_data.csv"))
head(data)
glimpse(data)
data <- data %>%
#select(price, mileage, age, operating_cost, )
mutate(price = price/10000,  # 0.5-6
range_bev = range_bev/100,  # 0.5 - 2.5
range_phev = range_phev /10,  # 1 - 4
mileage = mileage * 10,  # 2 - 6
age = age * 10, # 2 - 8
operating_cost = operating_cost/10 # 0.3 - 2.5
)
# Estimate MNL model
# First create some dummy coded variables for categorical variables
#data <- dummy_cols(data, c('powertrain'))
# Clean up names of created variables
data <- clean_names(data)
# Estimate the model
model <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"price",
"mileage",
"age",
"operating_cost",
"range_bev",
"range_phev",
"powertrainbev",
"powertrainhev",
"powertrainphev"
)
)
# View summary of results
summary(model)
# Check the 1st order condition: Is the gradient at the solution zero?
model$gradient
# 2nd order condition: Is the hessian negative definite?
# (If all the eigenvalues are negative, the hessian is negative definite)
eigen(model$hessian)$values
# Estimate multinomial logit (MNL) models
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
# -----------------------------------------------------------------------------
# Load the data set:
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
#head(data)
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
veh_price = veh_price/10000, # 0.5 - 6
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Estimate MNL model
# First create some dummy coded variables for categorical variables
#data <- dummy_cols(data, c('battery_refurbish', 'degradation_high'))
# Clean up names of created variables
data <- clean_names(data)
glimpse(data)
# Estimate the model
model1 <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbishcellreplace",
"battery_refurbishpackreplace",
"battery_range_year3",
"battery_range_year8"
)
)
# View summary of results
summary(model1)
# Check the 1st order condition: Is the gradient at the solution zero?
model$gradient
# 2nd order condition: Is the hessian negative definite?
# (If all the eigenvalues are negative, the hessian is negative definite)
eigen(model$hessian)$values
# Estimate the model
model2 <- logitr(
data    = data
,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbishcellreplace",
"battery_refurbishpackreplace",
"battery_range_year0",
"battery_degradation"
)
)
# View summary of results
summary(model2)
# Check the 1st order condition: Is the gradient at the solution zero?
model$gradient
# 2nd order condition: Is the hessian negative definite?
# (If all the eigenvalues are negative, the hessian is negative definite)
eigen(model$hessian)$values
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files", "old code", "testing_initial_data_modeling",  "vehicle_choice_data.csv"))
head(data)
glimpse(data)
data <- data %>%
#select(price, mileage, age, operating_cost, )
mutate(price = price/10000,  # 0.5-6
range_bev = range_bev/100,  # 0.5 - 2.5
range_phev = range_phev /10,  # 1 - 4
mileage = mileage * 10,  # 2 - 6
age = age * 10, # 2 - 8
operating_cost = operating_cost/10 # 0.3 - 2.5
)
# Clean up names of created variables
data <- clean_names(data)
# Estimate the model
model <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"price",
"mileage",
"age",
"operating_cost",
"range_bev",
"range_phev",
"powertrainbev",
"powertrainhev",
"powertrainphev"
)
)
# View summary of results
summary(model)
View(data)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
veh_price = veh_price/10000, # 0.5 - 6
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
View(data)
data <- read_csv(here("code files", "old code", "testing_initial_data_modeling",  "vehicle_choice_data.csv"))
head(data)
glimpse(data)
View(data)
data <- data %>%
#select(price, mileage, age, operating_cost, )
mutate(price = price/10000,  # 0.5-6
range_bev = range_bev/100,  # 0.5 - 2.5
range_phev = range_phev /10,  # 1 - 4
mileage = mileage * 10,  # 2 - 6
age = age * 10, # 2 - 8
operating_cost = operating_cost/10 # 0.3 - 2.5
)
View(data)
# Clean up names of created variables
data <- clean_names(data)
# Estimate the model
model <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"price",
"mileage",
"age",
"operating_cost",
"range_bev",
"range_phev",
"powertrainbev",
"powertrainhev",
"powertrainphev"
)
)
# View summary of results
summary(model)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files", "old code", "testing_initial_data_modeling",  "vehicle_choice_data.csv"))
head(data)
glimpse(data)
data <- data %>%
#select(price, mileage, age, operating_cost, )
mutate(price = price/10000,  # 0.5-6
range_bev = range_bev/100,  # 0.5 - 2.5
range_phev = range_phev /10,  # 1 - 4
mileage = mileage * 10,  # 2 - 6
age = age * 10, # 2 - 8
operating_cost = operating_cost/10 # 0.3 - 2.5
)
# Clean up names of created variables
data <- clean_names(data)
# Estimate the model
model <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"price",
"mileage",
"age",
"operating_cost",
"range_bev",
"range_phev",
"powertrainbev",
"powertrainhev",
"powertrainphev"
)
)
# View summary of results
summary(model)
# Load libraries
library(logitr)
library(tidyverse)
library(fastDummies)
library(janitor)
library(here)
options(dplyr.width = Inf) # So you can see all of the columns
data <- read_csv(here("code files","old code", "testing_initial_data_modeling",  "battery_choice_data.csv"))
glimpse(data)
data <- data %>%
mutate(
veh_mileage = veh_mileage/10000,  #3 - 6
veh_price = veh_price/10000, # 0.5 - 6
battery_range_year3 = battery_range_year3 /100, # 1-3
battery_range_year8 = battery_range_year8 /100, # 0.5 - 2
battery_degradation = (battery_degradation * 10)
) %>%
select(-starts_with("battery_health"), -starts_with("time") )
# Clean up names of created variables
data <- clean_names(data)
glimpse(data)
# Estimate the model
model1 <- logitr(
data    = data,
outcome = "choice",
obsID   = "obs_id",
pars = c(
"veh_mileage",
"veh_price",
"battery_refurbishcellreplace",
"battery_refurbishpackreplace",
"battery_range_year3",
"battery_range_year8"
)
)
# View summary of results
summary(model1)
