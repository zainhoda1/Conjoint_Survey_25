---
title: "Power Analysis"
format: html
theme: united
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(
    warning = FALSE,
    message = FALSE,
    fig.path = "figs/",
    fig.width = 7.252,
    fig.height = 4,
    comment = "#>",
    fig.retina = 3
)

library(tidyverse)
library(cbcTools)
library(logitr)
```

First, define the attributes and levels:

```{r}
profiles_used <- cbc_profiles(
  powertrain     = c('Gasoline', 'Electric', 'Plug-in Hybrid', 'Hybrid'),
  price          = 1000*seq(0.8, 1.1, 0.1),
  range          = seq(50, 250, 25), 
  mileage        = seq(20000, 60000, 5000),
  my             = seq(2015, 2023),
  operating_cost = seq(3, 21, 3)
)
```

## Resrictions:

```{r}
profiles_used_restricted <- profiles_used
profiles_used_restricted <- cbc_restrict(
  profiles_used,
  (powertrain == "Gasoline") & (operating_cost < 9),
  (powertrain != "Gasoline") & (operating_cost >= 18)
)

# Check powertrain counts
profiles_used_restricted %>%
  count(powertrain, operating_cost)

```


# Random design

Make a randomized full-factorial design:

```{r}
design_rand <- cbc_design(
  profiles = profiles_used_restricted,
  n_resp   = 4000, # Number of respondents
  n_alts   = 3,    # Number of alternatives per question
  n_q      = 6     # Number of questions per respondent
)

head(design_rand)

design_rand$range[design_rand$powertrain !='Electric'] <- 300


duplicates <- design_rand[duplicated(design_rand[c('respID', 'qID', 'powertrain', 'price',
                                       'range', 'mileage', 'operating_cost' )]), ]

design_rand <- design_rand[!duplicated(design_rand[c('respID', 'qID', 'powertrain', 'price',
                            'range', 'mileage', 'operating_cost' )]), ]

id_to_remove <- duplicates$respID

design_rand <- design_rand %>%
  filter(!respID %in% id_to_remove)


# 
# design_rand$operating_cost =  paste0(design_rand$operating_cost, " cents per mile", "\n",
#                             "("  ,round(330/design_rand$operating_cost, 1), " MPG equivalent)")

# 
# design_rand <- design_rand %>%
#   mutate(range = case_when(
#     powertrain == "Hybrid" ~ "300 mile range on 1 tank",
#     powertrain == "Gasoline" ~ "300 mile range on 1 tank",
#     powertrain == "Plug-in Hybrid" ~ "300 mile range on 1 tank \n(first 40 miles electric)",
#     powertrain == "Electric"  ~ paste0(design_rand$range, " mile range on full charge")
#   ))



cbc_balance(design_rand)
cbc_overlap(design_rand)
```

Simulate random choices

```{r}
data_rand <- cbc_choices(
    design = design_rand,
    obsID = "obsID"
)
```

Run power analysis



```{r}
# model <- logitr(
#     data    = data_rand,
#     pars    = c("powertrain", "price", "range", "mileage", "my","operating_cost"),
#     outcome = "choice",
#     obsID   = "obsID"
# )
# summary(model)
# 
# head(power_rand)
# tail(power_rand)
```


```{r}
power_rand <- cbc_power(
    nbreaks = 20,
    n_q     = 6,
    data    = data_rand,
    pars    = c("powertrain", "price", "range", "mileage", "my","operating_cost"),
    outcome = "choice",
    obsID   = "obsID"
)

head(power_rand)
tail(power_rand)
```

Here is a summary of the standard errors for each sample size:

```{r}
ggplot(power_rand) +
  geom_hline(yintercept = 0.05, color = "red", linetype = 2) +
  geom_point(aes(x = sampleSize, y = se, color = coef)) +
  expand_limits(y = 0) +
  scale_y_continuous(limits = c(0, 0.125)) +
  theme_bw() + 
  labs(
    x = "Sample size", 
    y = "Standard error", 
    color = "Coefficient"
  )
```



