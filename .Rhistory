library(cbcTools)
library(tidyverse)
library(here)
library(data.table)
# quantiles of MPG for the 2024 model year vehicles by for different powertrains and vehicle types. Data source: EPA or fuel_economic_gov
dt_mpg<-as.data.frame(read.csv(paste0(here(),"/survey_updated_pretest/data/mpg_by_segment_fuel.csv"))) %>%  # /survey/data/
# kwh per 100 miles --> kwh per mile
mutate(kwh_q10=kwh_q10/100,
kwh_q25=kwh_q25/100,
kwh_q50=kwh_q50/100,
kwh_q75=kwh_q75/100,
kwh_q90=kwh_q90/100
)
# electricity rate per kwh https://www.chooseenergy.com/electricity-rates-by-state/ March 2025
electricity_rate_low <- 0.11
electricity_rate_avg <- 0.17
electricity_rate_high <-0.33
# gas rate per gallon https://www.chooseenergy.com/data-center/cost-of-driving-by-state May 2025
gasoline_rate_low <- 2.66
gasoline_rate_avg <- 3.18
gasoline_rate_high <- 4.77
# PHEV utility factors https://docs.nrel.gov/docs/gen/fy07/41341.pdf
phev_uf_car<- 0.668
phev_uf_suv<- 0.487
# MPGe- One gallon of gasoline is equivalent to 33.7 kilowatt-hours (kWh) of electricity https://www.bluegrassauto.com/hybrid-and-electric-vehicle-comparisons/
gas_electricity<- 33.7
dt_mpg<-dt_mpg %>%
mutate(
cents_mile_min=case_when(
powertrain=="bev" ~ electricity_rate_low*(kwh_q10)*100,
powertrain %in% c("cv","hev") ~ gasoline_rate_low/mpg_q90*100,
powertrain=="phev" & vehicle_type=="car" ~ (phev_uf_car*(electricity_rate_low*(kwh_q10))+(1-phev_uf_car)*(gasoline_rate_low/mpg_q90))*100,
powertrain=="phev" & vehicle_type=="suv" ~ (phev_uf_suv*(electricity_rate_low*(kwh_q10))+(1-phev_uf_suv)*(gasoline_rate_low/mpg_q90))*100
),
cents_mile_max=case_when(
powertrain=="bev" ~ electricity_rate_high*(kwh_q90)*100,
powertrain %in% c("cv","hev") ~ gasoline_rate_high/mpg_q10*100,
powertrain=="phev" & vehicle_type=="car" ~ (phev_uf_car*(electricity_rate_high*(kwh_q90))+(1-phev_uf_car)*(gasoline_rate_high/mpg_q10))*100,
powertrain=="phev" & vehicle_type=="suv" ~ (phev_uf_suv*(electricity_rate_high*(kwh_q90))+(1-phev_uf_suv)*(gasoline_rate_high/mpg_q10))*100
)
) %>%
mutate(MPGe_min=case_when(
powertrain %in% c("bev","cv","hev") ~ mpg_q10,
powertrain=="phev" & vehicle_type=="car" ~ (1 / (phev_uf_car * (kwh_q10 / gas_electricity) + (1 - phev_uf_car) * (1 / mpg_q90))),
powertrain=="phev" & vehicle_type=="suv" ~ (1 / (phev_uf_suv * (kwh_q10 / gas_electricity) + (1 - phev_uf_suv) * (1 / mpg_q90)))
),
MPGe_max=case_when(
powertrain %in% c("bev","cv","hev") ~ mpg_q90,
powertrain=="phev" & vehicle_type=="car" ~ (1 / (phev_uf_car * (kwh_q90 / gas_electricity) + (1 - phev_uf_car) * (1 / mpg_q10))),
powertrain=="phev" & vehicle_type=="suv" ~ (1 / (phev_uf_suv * (kwh_q90 / gas_electricity) + (1 - phev_uf_suv) * (1 / mpg_q10)))
)
)
dt_mpg<-dt_mpg %>%
rowwise() %>%
mutate(
quintiles = list(seq(from = cents_mile_min, to = cents_mile_max, length.out = 5))
) %>%
unnest_wider(quintiles, names_sep = "_") %>%
rename_with(~ paste0("cents_mile_value_", 1:5), starts_with("quintiles"))
dt_mpg<-dt_mpg%>%
rowwise() %>%
mutate(
quintiles = list(seq(from = MPGe_max, to = MPGe_min, length.out = 5))
) %>%
unnest_wider(quintiles, names_sep = "_") %>%
rename_with(~ paste0("MPGe_value_", 1:5), starts_with("quintiles"))
dt_mpg_expanded <- dt_mpg %>%
## Display all possible values
# mutate(
#   cents_mile_value = map2(cents_mile_min_round, cents_mile_max_round, ~ .x:.y)
# ) %>%
# unnest(cents_mile_value) %>%
## Only display min, avg, max values
pivot_longer(starts_with("cents_mile_value_") | starts_with("MPGe_value_"),
names_to = c(".value", "rank"),
names_pattern = "(.*)_value_(\\d+)"
) %>%
mutate(cents_mile=round(cents_mile,0),
MPGe=format(round(MPGe,1), nsmall=1)) %>%
select(vehicle_type,powertrain,cents_mile, MPGe) %>%
mutate(operating_cost_text =  paste0(cents_mile, " cents per mile",
" ("  ,MPGe, " MPG equivalent)")) %>%
select(-MPGe)
cost_list <- dt_mpg_expanded %>%
group_by(vehicle_type, powertrain) %>%
summarise(cents_mile_list = list(cents_mile), .groups = 'drop')
View(cost_list)
### For car
# Define profiles with attributes and levels
profiles_used <- cbc_profiles(
powertrain     = c('Conventional','Gas hybrid', 'Plug-in hybrid','Battery electric'),
price          = seq(0.8, 1.1, 0.1),
range          = seq(50, 250, 25),
mileage        = seq(20000, 60000, 5000),
make_year      = seq(2015, 2023),
operating_cost = seq(dt_mpg_expanded %>%
filter(vehicle_type == "car") %>%
select(starts_with("cents")) %>%
unlist() %>%
min(na.rm = TRUE),
dt_mpg_expanded %>%
filter(vehicle_type == "car") %>%
select(starts_with("cents")) %>%
unlist() %>%
max(na.rm = TRUE)+1)
)
profiles_used <-profiles_used %>%
mutate(keep_row = case_when(
powertrain == "Conventional"   & operating_cost %in% unlist(cost_list %>% filter(vehicle_type == "car", powertrain == "cv")   %>% pull(cents_mile_list)) ~ TRUE,
powertrain == "Gas hybrid"     & operating_cost %in% unlist(cost_list %>% filter(vehicle_type == "car", powertrain == "hev")  %>% pull(cents_mile_list)) ~ TRUE,
powertrain == "Plug-in hybrid" & operating_cost %in% unlist(cost_list %>% filter(vehicle_type == "car", powertrain == "phev") %>% pull(cents_mile_list)) ~ TRUE,
powertrain == "Battery electric" & operating_cost %in% unlist(cost_list %>% filter(vehicle_type == "car", powertrain == "bev") %>% pull(cents_mile_list)) ~ TRUE,
TRUE ~ FALSE
))
View(profiles_used)
profiles_used_restricted <- profiles_used %>% filter(keep_row)
View(profiles_used_restricted)
?cbc_design
library(here)
here()
# Chunk 1: setup
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
# Chunk 2
profiles <- cbc_profiles(
veh_mileage        = seq(1.5, 5, 0.5), # unit: 10000
veh_price          = seq(0.8, 1.2, 0.1), # unit: 20000
battery_refurbish  = c('original', 'cellreplace','packreplace'),
battery_range_year0 = seq(2, 3.6, 0.4), # unit: 100
battery_degradation = seq(1, 8, 1) # %
)
profiles
# Chunk 3
# Chunk 4
priors_fixed <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price            = -0.1,      # Each $20000 increase reduces utility by 0.1
battery_refurbish = c(-1.0, -0.5),   # Cell refurbishment least preferred
battery_range_year0  = 0.5,         # Each 100 mile of range adds utility by 0.5
battery_degradation  = -0.5          # Each 1% of degradation increases subtracts utility by 0.5
)
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
profiles <- cbc_profiles(
veh_mileage        = seq(1.5, 5, 0.5), # unit: 10000
veh_price          = seq(0.8, 1.2, 0.1), # unit: 20000
battery_refurbish  = c('original', 'cellreplace','packreplace'),
battery_range_year0 = seq(2, 3.6, 0.4), # unit: 100
battery_degradation = seq(1, 8, 1) # %
)
profiles
priors_fixed <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price            = -0.1,      # Each $20000 increase reduces utility by 0.1
battery_refurbish = c(-1.0, -0.5),   # Cell refurbishment least preferred
battery_range_year0  = 0.5,         # Each 100 mile of range adds utility by 0.5
battery_degradation  = -0.5          # Each 1% of degradation increases subtracts utility by 0.5
)
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
cbcTools::cbc_priors
install.packages("cbcTools")
install.packages("cbcTools")
# Chunk 1: setup
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
# Chunk 2
profiles <- cbc_profiles(
veh_mileage        = seq(1.5, 5, 0.5), # unit: 10000
veh_price          = seq(0.8, 1.2, 0.1), # unit: 20000
battery_refurbish  = c('original', 'cellreplace','packreplace'),
battery_range_year0 = seq(2, 3.6, 0.4), # unit: 100
battery_degradation = seq(1, 8, 1) # %
)
profiles
# Chunk 3
# Chunk 4
priors_fixed <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price            = -0.1,      # Each $20000 increase reduces utility by 0.1
battery_refurbish = c(-1.0, -0.5),   # Cell refurbishment least preferred
battery_range_year0  = 0.5,         # Each 100 mile of range adds utility by 0.5
battery_degradation  = -0.5          # Each 1% of degradation increases subtracts utility by 0.5
)
priors_fixed
# Chunk 5
priors_random_parameter <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price = -0.1, # Assume $1,000 price increase = -0.1 utility
battery_refurbish = rand_spec("n", c(-1.0, -0.5), c(0.1, 0.1)), # Reference = "original"
battery_range_year0 = 0.5,   # Each 100 mile of range adds utility by 0.5
battery_degradation = -0.5 # 1% increase in degradation = -1 utility
)
priors_random_parameter
# Chunk 6
# design_random <- cbc_design(
#   profiles = profiles,
#   # priors = priors_fixed,
#   method = "random", # randomized full-factorial design
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6    # Number of questions per respondent #6
# )
design_random_fixed_parameter <- cbc_design(
profiles = profiles,
priors = priors_fixed,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
remove_dominant = TRUE
)
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
profiles <- cbc_profiles(
veh_mileage        = seq(1.5, 5, 0.5), # unit: 10000
veh_price          = seq(0.8, 1.1, 0.1), # unit: 20000
battery_refurbish  = c('original', 'cellreplace','packreplace'),
battery_range_year0 = seq(2, 3.6, 0.4), # unit: 100
battery_degradation = seq(1, 8, 1) # %
)
profiles
priors_fixed <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price            = -0.1,      # Each $20000 increase reduces utility by 0.1
battery_refurbish = c(-1.0, -0.5),   # Cell refurbishment least preferred
battery_range_year0  = 0.5,         # Each 100 mile of range adds utility by 0.5
battery_degradation  = -0.5          # Each 1% of degradation increases subtracts utility by 0.5
)
priors_fixed
priors_random_parameter <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price = -0.1, # Assume $1,000 price increase = -0.1 utility
battery_refurbish = rand_spec("n", c(-1.0, -0.5), c(0.1, 0.1)), # Reference = "original"
battery_range_year0 = 0.5,   # Each 100 mile of range adds utility by 0.5
battery_degradation = -0.5 # 1% increase in degradation = -1 utility
)
priors_random_parameter
# design_random <- cbc_design(
#   profiles = profiles,
#   # priors = priors_fixed,
#   method = "random", # randomized full-factorial design
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6    # Number of questions per respondent #6
# )
design_random_fixed_parameter <- cbc_design(
profiles = profiles,
priors = priors_fixed,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
remove_dominant = TRUE,
no_choice = TRUE
)
cbc_priors()
?cbc_priors
# Chunk 1: setup
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
# Chunk 2
profiles <- cbc_profiles(
veh_mileage        = seq(1.5, 5, 0.5), # unit: 10000
veh_price          = seq(0.8, 1.1, 0.1), # unit: 20000
battery_refurbish  = c('original', 'cellreplace','packreplace'),
battery_range_year0 = seq(2, 3.6, 0.4), # unit: 100
battery_degradation = seq(1, 8, 1) # %
)
profiles
# Chunk 3
# Chunk 4
priors_fixed <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price            = -0.1,      # Each $20000 increase reduces utility by 0.1
battery_refurbish = c(-1.0, -0.5),   # Cell refurbishment least preferred
battery_range_year0  = 0.5,         # Each 100 mile of range adds utility by 0.5
battery_degradation  = -0.5,          # Each 1% of degradation increases subtracts utility by 0.5
no_choice = 0
)
priors_fixed
# Chunk 5
priors_random_parameter <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price = -0.1, # Assume $1,000 price increase = -0.1 utility
battery_refurbish = rand_spec("n", c(-1.0, -0.5), c(0.1, 0.1)), # Reference = "original"
battery_range_year0 = 0.5,   # Each 100 mile of range adds utility by 0.5
battery_degradation = -0.5, # 1% increase in degradation = -1 utility
no_choice = 0
)
priors_random_parameter
#| label: setup
#| include: false
knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
fig.path = "figs/",
fig.width = 7.252,
fig.height = 4,
comment = "#>",
fig.retina = 3
)
library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
profiles <- cbc_profiles(
veh_mileage        = seq(1.5, 5, 0.5), # unit: 10000
veh_price          = seq(0.8, 1.1, 0.1), # unit: 20000
battery_refurbish  = c('original', 'cellreplace','packreplace'),
battery_range_year0 = seq(2, 3.6, 0.4), # unit: 100
battery_degradation = seq(1, 8, 1) # %
)
profiles
priors_fixed <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price            = -0.1,      # Each $20000 increase reduces utility by 0.1
battery_refurbish = c(-1.0, -0.5),   # Cell refurbishment least preferred
battery_range_year0  = 0.5,         # Each 100 mile of range adds utility by 0.5
battery_degradation  = -0.5,          # Each 1% of degradation increases subtracts utility by 0.5
no_choice = 0
)
priors_fixed
priors_random_parameter <- cbc_priors(
profiles = profiles,
veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
veh_price = -0.1, # Assume $1,000 price increase = -0.1 utility
battery_refurbish = rand_spec("n", c(-1.0, -0.5), c(0.1, 0.1)), # Reference = "original"
battery_range_year0 = 0.5,   # Each 100 mile of range adds utility by 0.5
battery_degradation = -0.5, # 1% increase in degradation = -1 utility
no_choice = 0
)
priors_random_parameter
# design_random <- cbc_design(
#   profiles = profiles,
#   # priors = priors_fixed,
#   method = "random", # randomized full-factorial design
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6    # Number of questions per respondent #6
# )
design_random_fixed_parameter <- cbc_design(
profiles = profiles,
priors = priors_fixed,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
remove_dominant = TRUE,
no_choice = TRUE
)
View(profiles)
# Check your profiles structure
str(profiles)
head(profiles)
# Check your priors structure
str(priors_fixed)
print(priors_fixed)
# Count parameters
length(priors_fixed)  # Should match number of parameters in profiles
priors_fixed
design_random_fixed_parameter <- cbc_design(
profiles = profiles,
priors = priors_fixed,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 3,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
remove_dominant = TRUE,
no_choice = TRUE
)
?cbc_design
design_random_fixed_parameter <- cbc_design(
profiles = profiles,
priors = priors_fixed,
method = "random", # randomized full-factorial design
n_resp   = 3000, # Number of respondents
n_alts   = 4,    # Number of alternatives per question
n_q      = 6,    # Number of questions per respondent #6
remove_dominant = TRUE,
no_choice = TRUE
)
here()
surveydown::sd_create_survey(
#path = "path/to/survey",
template = "conjoint_buttons"
)
surveydown::sd_create_survey(
#path = "testing",
template = "conjoint_buttons"
)
surveydown::sd_create_survey(
path = "testing",
template = "conjoint_buttons"
)
