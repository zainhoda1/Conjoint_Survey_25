---
title: "Power Analysis - Battery Choices"
format: html
theme: united
execute:
  cache: true
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(
    warning = FALSE,
    message = FALSE,
    fig.path = "figs/",
    fig.width = 7.252,
    fig.height = 4,
    comment = "#>",
    fig.retina = 3
)

library(tidyverse)
library(cbcTools)
library(logitr)
library(here)
```

# Step 1: Generate Profiles

```{r}
profiles <- cbc_profiles(
  veh_mileage        = seq(1.5, 5, 0.5), # unit: 10000
  veh_price          = seq(0.8, 1.1, 0.1), # unit: 20000
  battery_refurbish  = c('original', 'cellreplace','packreplace'),
  battery_range_year0 = seq(2, 3.6, 0.4), # unit: 100
  battery_degradation = seq(1, 8, 1) # %
)

profiles

```

## Resrictions
None
```{r,echo=FALSE}


```


# Step 2: Set up priors

| Attribute | Expectation | Theory  | Suggested Sign |
|--------------|---------------|-----------|-----------|
| veh_price        | Lower price preferred   | Standard economic theory (price disutility)  |Negative (−)|
| veh_mileage          | Lower mileage preferred           |Higher mileage = older/worn vehicle    |Negative (−)|
| battery_refurbish    | Original battery > pack-based refurbishment > cell-based refurbishment   |Risk aversion, resale concerns, BEV reliability    |Negative (−)|
| battery_range_year0       | More range preferred          | Reduces range anxiety    | Positive (+)|
| battery_degradation | Less degradation preferred   | Reflects battery health and future value   | Negative (−)|


## Fixed Parameters
For example, if the coefficient of battery degradation is -10, then:

	- A 1% increase in degradation (from 0.01 to 0.02) reduces utility by 0.10.
	- A full 7% increase in degradation (from 0.01 to 0.08) would reduce utility by -0.7.

In DCE models, utilities usually range between -2 and +2, so a utility loss of -0.7 is noticeable, but not extreme. It reflects that battery degradation is an important factor in evaluating a used EV.
```{r}
priors_fixed <- cbc_priors(
  profiles = profiles,
  veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
  veh_price            = -0.1,      # Each $20000 increase reduces utility by 0.1
  battery_refurbish = c(-1.0, -0.5),   # Cell refurbishment least preferred
  battery_range_year0  = 0.5,         # Each 100 mile of range adds utility by 0.5
  battery_degradation  = -0.5,          # Each 1% of degradation increases subtracts utility by 0.5
  no_choice = 0
)

priors_fixed
```

## Random Parameters
```{r}
priors_random_parameter <- cbc_priors(
  profiles = profiles,
  veh_mileage          = -0.5,     # Each 10000 mile increase reduces utility by 0.5
  veh_price = -0.1, # Assume $1,000 price increase = -0.1 utility
  battery_refurbish = rand_spec("n", c(-1.0, -0.5), c(0.1, 0.1)), # Reference = "original"
  battery_range_year0 = 0.5,   # Each 100 mile of range adds utility by 0.5
  battery_degradation = -0.5, # 1% increase in degradation = -1 utility
  no_choice = 0
)

priors_random_parameter
```


# Step 3: Generate Designs

## Different designs
### Random Method
- **random**: randomly samples profiles for each respondent independently; maximum diversity but may be less statistically efficient
```{r}

# design_random <- cbc_design(
#   profiles = profiles,
#   # priors = priors_fixed,
#   method = "random", # randomized full-factorial design
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6    # Number of questions per respondent #6
# ) 

design_random_fixed_parameter <- cbc_design(
  profiles = profiles,
  priors = priors_fixed,
  method = "random", # randomized full-factorial design
  n_resp   = 3000, # Number of respondents
  n_alts   = 3,    # Number of alternatives per question
  n_q      = 6,    # Number of questions per respondent #6
  remove_dominant = TRUE,
  no_choice = TRUE
) 

design_random_random_parameter <- cbc_design(
  profiles = profiles,
  priors = priors_random_parameter,
  method = "random", # randomized full-factorial design
  n_resp   = 3000, # Number of respondents
  n_alts   = 3,    # Number of alternatives per question
  n_q      = 6,    # Number of questions per respondent #6
  remove_dominant = TRUE,
  no_choice = TRUE
) 
```



### Frequency-Based Methods
- **shortcut**: balances attribute level frequencies while avoiding duplicate profiles within questions.
- **minoverlap**: prioritizes minimizing attribute overlap within choice questions.
- **balanced**: optimizes both frequency balance and pairwise attribute interactions.
```{r}
# design_shortcut <- cbc_design(
#   profiles = profiles,
#   method = "shortcut",
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6    # Number of questions per respondent #6
#   
# )
# 
# design_shortcut_fixed_parameter <- cbc_design(
#   profiles = profiles,
#   priors = priors_fixed,
#   method = "shortcut",
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6   # Number of questions per respondent #6
# )


## Code will not run
# design_shortcut_fixed_parameter_remove_dominant <- cbc_design(
#   profiles = profiles,
#   priors = priors_fixed,
#   method = "shortcut",
#   n_resp   = 3000, # Number of respondents
#   n_alts   = 3,    # Number of alternatives per question
#   n_q      = 6,   # Number of questions per respondent #6
#   remove_dominant = TRUE
# )



```



## Design comparisons
```{r}
cbc_compare(
  "Random_fixed_parameter" = design_random_fixed_parameter,
  "Random_random_parameter" = design_random_random_parameter
  # "Shortcut" = design_shortcut,
  # "Shortcut_fixed_parameter" = design_shortcut_fixed_parameter
)
```


# Step 4: Inspect Design

**Goal: Evaluate the quality and properties of the design.**
- D-error: Lower values indicate more efficient designs
- Balance: Higher scores indicate better attribute level balance
- Overlap: Lower scores indicate less attribute overlap within questions
- Profile usage: Higher percentages indicate better use of available profiles
```{r}
# cbc_inspect(design_random)
cbc_inspect(design_random_fixed_parameter)
```

```{r}
cbc_inspect(design_random_random_parameter)
```


```{r}
# cbc_inspect(design_shortcut)
```


```{r}
# cbc_inspect(design_shortcut_fixed_parameter)
```
# Step 5: Simulate Choices

```{r}
choices_random_fixed_parameter <- cbc_choices(design_random_fixed_parameter, priors = priors_fixed)
choices_random_random_parameter <- cbc_choices(design_random_random_parameter, priors = priors_random_parameter)

# choices_shortcut <- cbc_choices(design_shortcut)
# choices_shortcut_fixed_parameter <- cbc_choices(design_shortcut_fixed_parameter,priors = priors_fixed)

```


## random_fixed_parameter
```{r}
choices_cat <- cbc_decode(choices_random_fixed_parameter)

# Filter for the chosen rows only
choices_cat <- choices_cat[which(choices_cat$choice == 1), ]

# Counts of choices made for each attribute level
table(choices_cat$veh_mileage)
table(choices_cat$veh_price)
table(choices_cat$battery_refurbish)
table(choices_cat$battery_range_year0)
table(choices_cat$battery_degradation)
```

## random_random_parameter
```{r}
choices_cat <- cbc_decode(choices_random_random_parameter)

# Filter for the chosen rows only
choices_cat <- choices_cat[which(choices_cat$choice == 1), ]

# Counts of choices made for each attribute level
table(choices_cat$veh_mileage)
table(choices_cat$veh_price)
table(choices_cat$battery_refurbish)
table(choices_cat$battery_range_year0)
table(choices_cat$battery_degradation)
```

## shortcut
```{r}
# choices_cat <- cbc_decode(choices_shortcut)
# 
# # Filter for the chosen rows only
# choices_cat <- choices_cat[which(choices_cat$choice == 1), ]
# 
# # Counts of choices made for each attribute level
# table(choices_cat$veh_mileage)
# table(choices_cat$veh_price)
# table(choices_cat$battery_refurbish)
# table(choices_cat$battery_range_year0)
# table(choices_cat$battery_degradation)
```

## shortcut_fixed_parameter
```{r}
# choices_cat_fixed_parameter <- cbc_decode(choices_shortcut_fixed_parameter)
# 
# # Filter for the chosen rows only
# choices_cat <- choices_cat[which(choices_cat$choice == 1), ]
# 
# # Counts of choices made for each attribute level
# table(choices_cat$veh_mileage)
# table(choices_cat$veh_price)
# table(choices_cat$battery_refurbish)
# table(choices_cat$battery_range_year0)
# table(choices_cat$battery_degradation)
```

# Step 6: Assess Power
- Statistical power is the probability of correctly detecting an effect when it truly exists, which depends on effect size, sample size, design efficiency, and model complexity.
- Power analysis focuses on prevision (standard errors)

## random_fixed_parameter
```{r}
power_random_fixed_parameter <- cbc_power(
  data=choices_random_fixed_parameter,
  outcome = "choice",
  obsID = "obsID",
  n_q = 6,
  n_breaks = 10
  )


plot(power_random_fixed_parameter, type = "power", power_threshold = 0.9)
plot(power_random_fixed_parameter, type = "se")
summary(power_random_fixed_parameter, power_threshold = 0.9)

```

## random_random_parameter
```{r}
power_random_random_parameter <- cbc_power(
  data=choices_random_random_parameter,
  outcome = "choice",
  obsID = "obsID",
  n_q = 6,
  n_breaks = 10)

plot(power_random_random_parameter, type = "power", power_threshold = 0.9)
plot(power_random_random_parameter, type = "se")
summary(power_random_random_parameter, power_threshold = 0.9)

```

## shortcut
```{r}
# power_shortcut <- cbc_power(
#   data=choices_shortcut,
#   outcome = "choice",
#   obsID = "obsID",
#   n_q = 6,
#   n_breaks = 10)
# 
# plot(power_shortcut, type = "power", power_threshold = 0.9)
# plot(power_shortcut, type = "se", power_threshold = 0.9)
# summary(power_shortcut, power_threshold = 0.9)

```

## shortcut_fixed_parameter
```{r}
# power_shortcut_fixed_parameter <- cbc_power(
#   data=choices_shortcut_fixed_parameter,
#   outcome = "choice",
#   obsID = "obsID",
#   n_q = 6,
#   n_breaks = 10)
# 
# plot(power_shortcut_fixed_parameter, type = "power", power_threshold = 0.9)
# plot(power_shortcut_fixed_parameter, type = "se", power_threshold = 0.9)
# summary(power_shortcut_fixed_parameter, power_threshold = 0.9)

```

## comparison
```{r}
plot_compare_power(
  random_fixed_parameter = power_random_fixed_parameter,
  random_random_parameter = power_random_random_parameter,
  # shortcut = power_shortcut,
  # shortcut_fixed_parameter = power_shortcut_fixed_parameter,
  type = "power"
)

plot_compare_power(
  random_fixed_parameter = power_random_fixed_parameter,
  random_random_parameter = power_random_random_parameter,
  # shortcut = power_shortcut,
  # shortcut_fixed_parameter = power_shortcut_fixed_parameter,
  type = "se"
)

```


#Step 7: Generate and output choices
```{r}
design_random_fixed_parameter_origin<-design_random_fixed_parameter
design_random_fixed_parameter<-cbc_decode(design_random_fixed_parameter)

design_rand_output <-design_random_fixed_parameter %>%
  mutate(veh_mileage = veh_mileage*10000,
         battery_degradation=battery_degradation/100,
         battery_range_year0=battery_range_year0*100) %>% 
  mutate(battery_health_year0=paste0(round(1 * 100, 0), "%"),
         battery_health_year3=(1-battery_degradation)^3,
         battery_health_year8=(1-battery_degradation)^8,
         # round to the closest 5
         battery_range_year3=round(battery_range_year0*battery_health_year3/5)*5,
         battery_range_year8=round(battery_range_year0*battery_health_year8/5)*5,

         battery_health_year3=paste0(round((1-battery_degradation)^3*100,0),"%"),
         battery_health_year8=paste0(round((1-battery_degradation)^8*100,0),"%"),
         ) %>%
  mutate(image_refurbishment=paste0("battery_survey_battery_", battery_refurbish, "_text",".png"),
    image_degradation=paste0("Range_Degradation_", battery_range_year0, "_", battery_degradation*100,".png"),
         )
# head(design_random_fixed_parameter)

#write.csv(design_rand_output, paste0(here("..",".."),"/survey_updated_pretest/data/battery_choice_questions.csv"), row.names = FALSE)

write.csv(design_rand_output, here('survey_updated_pretest', 'data', 'battery_choice_questions_testing_zain.csv'))
```


#-----------------------------------------------
# Create mileage/battery SoH images
```{r}
design_rand <- design_random_fixed_parameter %>%
  mutate(battery_degradation=battery_degradation/100,
         battery_range_year0=battery_range_year0*100) %>%
  mutate(battery_health_year0=1,
         battery_health_year3=(1-battery_degradation)^3,
         battery_health_year8=(1-battery_degradation)^8,
         # round to the closest 5
         battery_range_year3=round(battery_range_year0*battery_health_year3/5)*5,
         battery_range_year8=round(battery_range_year0*battery_health_year8/5)*5,
         # 0 decimal
         battery_health_year3=round(battery_health_year3,2),
         battery_health_year8=round(battery_health_year8,2)
         )

df_battery_degradation<-design_rand %>%
  select(battery_range_year0,battery_degradation) %>%
  distinct() %>%
  mutate(battery_degradation_id = row_number())

df_range_SOH<-design_rand %>%
  select(contains("year")) %>%
  distinct()

``` 

<!-- ## Version 1: Range \n (SoH) -outside -->
<!-- ```{r} -->
<!-- df_range_SOH_long <- df_range_SOH %>% -->
<!--   mutate(row_id = row_number()) %>% -->
<!--   pivot_longer( -->
<!--     cols = -row_id, -->
<!--     names_to = c("metric", "year"), -->
<!--     names_pattern = "(.*)_year(\\d+)", -->
<!--     values_to = "value" -->
<!--   ) %>% -->
<!--   pivot_wider( -->
<!--     names_from = metric, -->
<!--     values_from = value -->
<!--   ) %>% -->
<!--   group_by(row_id) %>% -->
<!--   mutate(battery_range_max = max(battery_range)) %>% -->
<!--   ungroup() %>% -->
<!--   left_join(df_battery_degradation %>% select(-battery_range_year0), by= c("row_id"="battery_degradation_id")) %>%  -->
<!--   mutate( -->
<!--     year = as.numeric(year), -->
<!--     label = paste0(battery_range, " mi\n(", battery_health*100, "%)"), -->
<!--     image_name = paste0("Range_Degradation_",battery_range_max, "_", battery_degradation*100), -->
<!--   ) %>% -->
<!--   select(-battery_degradation) -->
<!-- ``` -->

<!-- #### Full image -->
<!-- ```{r} -->

<!-- library(ggplot2) -->
<!-- library(dplyr) -->
<!-- library(tidyr) -->
<!-- library(scales) -->

<!-- segments <- 100 -->
<!-- max_battery_health <- 1 -->
<!-- segment_width <- max_battery_health / segments -->

<!-- # Create visual bar representation by 100% -->
<!-- df_segmented <- df_range_SOH_long %>% -->
<!--   mutate( -->
<!--     row_id = factor(row_id), -->
<!--     fill_color = col_numeric(c("red", "yellow", "green"), domain = c(0.4, 1))(battery_health), -->
<!--     visual_filled = ceiling(battery_health * segments), -->
<!--     y_center = as.numeric(factor(year)) -->
<!--   ) %>% -->
<!--   uncount(weights = segments, .id = "segment") %>% -->
<!--   group_by(row_id, year) %>% -->
<!--   mutate( -->
<!--     total_width = unique(battery_range_max), -->
<!--     segment_width = total_width / segments, -->
<!--     filled = segment <= visual_filled, -->
<!--     xmin = (segment - 1) * segment_width, -->
<!--     xmax = segment * segment_width, -->
<!--     ymin = y_center - 0.3, -->
<!--     ymax = y_center + 0.3 -->
<!--   ) %>% -->
<!--   ungroup() -->


<!-- # Battery outline -->
<!-- df_battery_outline <- df_range_SOH_long %>% -->
<!--   mutate( -->
<!--     y_center = as.numeric(factor(year)), -->
<!--     xmin = 0, -->
<!--     xmax = battery_range_max, -->
<!--     ymin = y_center - 0.3, -->
<!--     ymax = y_center + 0.3 -->
<!--   ) -->

<!-- # Terminal -->
<!-- df_terminal <-df_battery_outline %>% -->
<!--   mutate( -->
<!--     xmin = battery_range_max, -->
<!--     xmax = battery_range_max + 15, -->
<!--     ymin = ymin + 0.1, -->
<!--     ymax = ymax - 0.1 -->
<!--   ) -->


<!-- # Plot -->
<!-- Range_SoH_full_image<-ggplot() + -->
<!--   geom_rect( -->
<!--     data = df_segmented, #%>% filter(row_id==1), -->
<!--     aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = ifelse(filled, fill_color, "white")), -->
<!--     color = NA -->
<!--   ) + -->
<!--   geom_rect( -->
<!--     data = df_battery_outline, -->
<!--     aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), -->
<!--     fill = NA, color = "black", linewidth = 0.6 -->
<!--   ) + -->
<!--   geom_rect( -->
<!--     data = df_terminal, -->
<!--     aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), -->
<!--     fill = "black" -->
<!--   ) + -->
<!--   scale_fill_identity() + -->
<!--   facet_wrap(~ row_id) + #, scales = "free_y" -->
<!--   coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max) + 300),clip = "off") + -->
<!--   scale_y_reverse(limits = c(4, 0), -->
<!--                   breaks = c(3, 2, 1),  # Positions for ticks -->
<!--                   labels = c( "Future\n(8 yrs)" ,"Current\n(3 yrs)","New\n(0 yrs)"))+ -->
<!--    geom_text( -->
<!--     data = df_range_SOH_long, -->
<!--     aes(x = battery_range_max + 40, y = as.numeric(factor(year)), label = label), -->
<!--     hjust = 0, size = 3 -->
<!--   )+ -->
<!--   theme_minimal() + -->
<!--   theme( -->
<!--     axis.title = element_blank(), -->
<!--     axis.text.x = element_blank(), -->
<!--     axis.text.y = element_text(colour="black", size = 9), -->
<!--     axis.ticks = element_blank(), -->
<!--     panel.grid = element_blank(), -->
<!--     panel.background = element_rect(fill = NA, color = NA), -->
<!--     plot.background = element_rect(fill = NA, color = NA) -->
<!--   ) -->

<!-- # ggsave(plot = Range_SoH_full_image, filename  = here::here("survey","images","battery_choices", "SoH_range_full_image.png"), width = 15, height = 12) -->
<!-- ggsave(plot = Range_SoH_full_image,  -->
<!--        filename  = here::here("images","battery_choices_version1", "SoH_range_full_image.png"),  -->
<!--        bg = "transparent", -->
<!--        width = 15, height = 12) -->



<!-- ``` -->

<!-- #### Individual image -->
<!-- ```{r} -->
<!--  library(ragg) -->
<!-- # Create output directory if it doesn't exist -->
<!-- # output_dir <- here::here("survey", "images", "battery_choices") -->
<!-- output_dir <- here::here( "images", "battery_choices_version1") -->
<!-- if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE) -->

<!-- # Get unique row_ids -->
<!-- row_ids <- unique(df_segmented$row_id) -->

<!-- for (id in row_ids) { -->

<!--   # Filter data for this row_id -->
<!--   segmented_i <- df_segmented %>% filter(row_id == id) -->
<!--   outline_i   <- df_battery_outline %>% filter(row_id == id) -->
<!--   terminal_i  <- df_terminal %>% filter(row_id == id) -->
<!--   label_i     <- df_range_SOH_long %>% filter(row_id == id) -->

<!--   # Get the image name -->
<!--   image_filename <- label_i$image_name[1]  # Assuming it's the same for all years per row_id -->

<!--   # Build the plot -->
<!--   p <- ggplot() + -->
<!--     geom_rect( -->
<!--       data = segmented_i, -->
<!--       aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, -->
<!--           fill = ifelse(filled, fill_color, "white")), -->
<!--       color = NA -->
<!--     ) + -->
<!--     geom_rect( -->
<!--       data = outline_i, -->
<!--       aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), -->
<!--       fill = NA, color = "black", linewidth = 0.6 -->
<!--     ) + -->
<!--     geom_rect( -->
<!--       data = terminal_i, -->
<!--       aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), -->
<!--       fill = "black" -->
<!--     ) + -->
<!--     scale_fill_identity() + -->
<!--     coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max) + 200),  clip = "off") + -->
<!--     scale_y_reverse( -->
<!--       limits = c(3.6, 0.4), -->
<!--       breaks = c(3, 2, 1), -->
<!--       labels = c("Future\n(8 yrs)", "Current\n(3 yrs)", "New\n(0 yrs)") -->
<!--     ) + -->
<!--     geom_text( -->
<!--       data = label_i, -->
<!--       aes(x = battery_range_max + 30, y = as.numeric(factor(year)), label = label), -->
<!--       hjust = 0, size = 6 -->
<!--     ) + -->
<!--     theme_minimal() + -->
<!--     theme( -->
<!--       axis.title = element_blank(), -->
<!--       axis.text.x =element_blank(), -->
<!--       axis.text.y = element_text(colour = "black", size = 15), -->
<!--       axis.ticks = element_blank(), -->
<!--       panel.grid = element_blank(), -->
<!--       panel.spacing = unit(0, "pt"), -->
<!--       plot.margin = margin(0,0,0,0), -->
<!--       axis.ticks.length = unit(0, "pt") -->
<!--     ) -->

<!--   # Save the image -->
<!--   # ggsave( -->
<!--   #   filename = file.path(output_dir, paste0(image_filename, ".png")), -->
<!--   #   plot = p, -->
<!--   #   width = 3,  -->
<!--   #   height = 3, -->
<!--   #   dpi = 250 -->
<!--   #    -->
<!--   # ) -->

<!-- agg_png( -->
<!--   filename = file.path(output_dir, paste0(image_filename, ".png")), -->
<!--   width = 3, -->
<!--   height = 2.6, -->
<!--   units = "in", -->
<!--   res = 250 -->
<!-- ) -->
<!-- print(p) -->
<!-- dev.off() -->
<!-- } -->
<!-- ``` -->


## ***Version 2: Range (SoH)- inside the battery
```{r}
df_range_SOH_long <- df_range_SOH %>%
  mutate(row_id = row_number()) %>%
  pivot_longer(
    cols = -row_id,
    names_to = c("metric", "year"),
    names_pattern = "(.*)_year(\\d+)",
    values_to = "value"
  ) %>%
  pivot_wider(
    names_from = metric,
    values_from = value
  ) %>%
  group_by(row_id) %>%
  mutate(battery_range_max = max(battery_range)) %>%
  ungroup() %>%
  left_join(df_battery_degradation %>% select(-battery_range_year0), by= c("row_id"="battery_degradation_id")) %>%
  mutate(
    year = as.numeric(year),
    label = paste0(battery_range, "mi (", battery_health*100, "%)"),
    image_name = paste0("Range_Degradation_",battery_range_max, "_", battery_degradation*100),
  ) %>%
  select(-battery_degradation)

```

#### Full image
```{r}

library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)

segments <- 100
max_battery_health <- 1
segment_width <- max_battery_health / segments

# Create visual bar representation by 100%
df_segmented <- df_range_SOH_long %>%
  mutate(
    row_id = factor(row_id),
    fill_color = alpha(col_numeric(c("brown","red", "yellow", "green"), domain = c(0.5, 1))(battery_health),alpha = 0.6),
    visual_filled = ceiling(battery_health * segments),
    y_center = as.numeric(factor(year))
  ) %>%
  uncount(weights = segments, .id = "segment") %>%
  group_by(row_id, year) %>%
  mutate(
    total_width = unique(battery_range_max),
    segment_width = total_width / segments,
    filled = segment <= visual_filled,
    xmin = (segment - 1) * segment_width,
    xmax = segment * segment_width,
    ymin = y_center - 0.3,
    ymax = y_center + 0.3
  ) %>%
  ungroup()


# Battery outline
df_battery_outline <- df_range_SOH_long %>%
  mutate(
    y_center = as.numeric(factor(year)),
    xmin = 0,
    xmax = battery_range_max,
    ymin = y_center - 0.3,
    ymax = y_center + 0.3
  )

# Terminal
df_terminal <-df_battery_outline %>%
  mutate(
    xmin = battery_range_max,
    xmax = battery_range_max + 15,
    ymin = ymin + 0.1,
    ymax = ymax - 0.1
  )


# Plot
Range_SoH_full_image<-ggplot() +
  geom_rect(
    data = df_segmented, #%>% filter(row_id==1),
    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = ifelse(filled, fill_color, "white")),
    color = NA
  ) +
  geom_rect(
    data = df_battery_outline,
    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
    fill = NA, color = "black", linewidth = 0.6
  ) +
  geom_rect(
    data = df_terminal,
    aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
    fill = "black"
  ) +
  scale_fill_identity() +
  facet_wrap(~ row_id) + #, scales = "free_y"
  coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max)),clip = "off") +
  scale_y_reverse(limits = c(3.6, 0.4),
                  breaks = c(3, 2, 1),  # Positions for ticks
                  labels = c("Future\n(in 5 yrs)","Today\n(at 3 yrs old)","Initial\ncondition"))+
   geom_text(
    data = df_range_SOH_long,
    aes(x = 5, y = as.numeric(factor(year)), label = label),
    hjust = 0, size = 4.4
  )+
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_text(colour="black", size = 12),
    axis.ticks = element_blank(),
    panel.grid = element_blank()
  )

# ggsave(plot = Range_SoH_full_image, filename  = here::here("survey","images","battery_choices", "SoH_range_full_image.png"), width = 15, height = 12)
ggsave(plot = Range_SoH_full_image, filename  = here("..","..","survey_updated_pretest","images","battery_choices_version2", "SoH_range_full_image.png"), width = 18, height = 12)

```

#### Individual image
```{r}
 library(ragg)
# Create output directory if it doesn't exist
output_dir <- here::here( "..","..","survey_updated_pretest","images", "battery_choices_version2")
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)

# Get unique row_ids
row_ids <- unique(df_segmented$row_id)

for (id in row_ids) {

  # Filter data for this row_id
  segmented_i <- df_segmented %>% filter(row_id == id)
  outline_i   <- df_battery_outline %>% filter(row_id == id)
  terminal_i  <- df_terminal %>% filter(row_id == id)
  label_i     <- df_range_SOH_long %>% filter(row_id == id)

  # Get the image name
  image_filename <- label_i$image_name[1]  # Assuming it's the same for all years per row_id

  # Build the plot
  p <- ggplot() +
    geom_rect(
      data = segmented_i,
      aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax,
          fill = ifelse(filled, fill_color, "white")),
      color = NA
    ) +
    geom_rect(
      data = outline_i,
      aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
      fill = NA, color = "black", linewidth = 0.6
    ) +
    geom_rect(
      data = terminal_i,
      aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
      fill = "black"
    ) +
    scale_fill_identity() +
    coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max)),  clip = "off") +
    scale_y_reverse(
      limits = c(3.6, 0.4),
      breaks = c(3, 2, 1),
      labels = c("Future\n(in 5 yrs)","Today\n(at 3 yrs old)","Initial\ncondition"))+
    geom_text(
      data = label_i,
      aes(x = 5, y = as.numeric(factor(year)), label = label),
      hjust = 0, size = 5.5
    ) +
    # theme_minimal() +
    theme(
      axis.title = element_blank(),
      axis.text.x =element_blank(),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks = element_blank(),
      panel.grid = element_blank(),
      panel.spacing = unit(0, "pt"),
      plot.margin = margin(0,0,0,0),
      axis.ticks.length = unit(0, "pt"),
    panel.background = element_rect(fill = NA, color = NA),
    plot.background = element_rect(fill = NA, color = NA)

    )

  # Save the image
  # ggsave(
  #   filename = file.path(output_dir, paste0(image_filename, ".png")),
  #   plot = p,
  #   width = 3,
  #   height = 3,
  #   dpi = 250
  #
  # )

agg_png(
  filename = file.path(output_dir, paste0(image_filename, ".png")),
  width = 4,
  height = 2.6,
  units = "in",
  res = 250,
  background = "transparent"
)
print(p)
dev.off()
}
```

<!-- ## Version 3: Range (SoH)- outside the battery -->
<!-- ```{r} -->
<!-- df_range_SOH_long <- df_range_SOH %>% -->
<!--   mutate(row_id = row_number()) %>% -->
<!--   pivot_longer( -->
<!--     cols = -row_id, -->
<!--     names_to = c("metric", "year"), -->
<!--     names_pattern = "(.*)_year(\\d+)", -->
<!--     values_to = "value" -->
<!--   ) %>% -->
<!--   pivot_wider( -->
<!--     names_from = metric, -->
<!--     values_from = value -->
<!--   ) %>% -->
<!--   group_by(row_id) %>% -->
<!--   mutate(battery_range_max = max(battery_range)) %>% -->
<!--   ungroup() %>% -->
<!--   left_join(df_battery_degradation %>% select(-battery_range_year0), by= c("row_id"="battery_degradation_id")) %>% -->
<!--   mutate( -->
<!--     year = as.numeric(year), -->
<!--     label = paste0(battery_range, " mi\n(", battery_health*100, "%)"), -->
<!--     image_name = paste0("Range_Degradation_",battery_range_max, "_", battery_degradation*100), -->
<!--   ) %>% -->
<!--   select(-battery_degradation) -->

<!-- ``` -->

<!-- #### Full image -->
<!-- ```{r} -->

<!-- library(ggplot2) -->
<!-- library(dplyr) -->
<!-- library(tidyr) -->
<!-- library(scales) -->

<!-- segments <- 100 -->
<!-- max_battery_health <- 1 -->
<!-- segment_width <- max_battery_health / segments -->

<!-- # Create visual bar representation by 100% -->
<!-- df_segmented <- df_range_SOH_long %>% -->
<!--   mutate( -->
<!--     row_id = factor(row_id), -->
<!--     fill_color = col_numeric(c("brown","red", "yellow", "green"), domain = c(0.5, 1))(battery_health), -->
<!--     visual_filled = ceiling(battery_health * segments), -->
<!--     y_center = as.numeric(factor(year)) -->
<!--   ) %>% -->
<!--   uncount(weights = segments, .id = "segment") %>% -->
<!--   group_by(row_id, year) %>% -->
<!--   mutate( -->
<!--     total_width = unique(battery_range_max), -->
<!--     segment_width = total_width / segments, -->
<!--     filled = segment <= visual_filled, -->
<!--     xmin = (segment - 1) * segment_width, -->
<!--     xmax = segment * segment_width, -->
<!--     ymin = y_center - 0.3, -->
<!--     ymax = y_center + 0.3 -->
<!--   ) %>% -->
<!--   ungroup() -->


<!-- # Battery outline -->
<!-- df_battery_outline <- df_range_SOH_long %>% -->
<!--   mutate( -->
<!--     y_center = as.numeric(factor(year)), -->
<!--     xmin = 0, -->
<!--     xmax = battery_range_max, -->
<!--     ymin = y_center - 0.3, -->
<!--     ymax = y_center + 0.3 -->
<!--   ) -->

<!-- # Terminal -->
<!-- df_terminal <-df_battery_outline %>% -->
<!--   mutate( -->
<!--     xmin = battery_range_max, -->
<!--     xmax = battery_range_max + 15, -->
<!--     ymin = ymin + 0.1, -->
<!--     ymax = ymax - 0.1 -->
<!--   ) -->


<!-- # Plot -->
<!-- Range_SoH_full_image<-ggplot() + -->
<!--   geom_rect( -->
<!--     data = df_segmented, #%>% filter(row_id==1), -->
<!--     aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = ifelse(filled, fill_color, "white")), -->
<!--     color = NA -->
<!--   ) + -->
<!--   geom_rect( -->
<!--     data = df_battery_outline, -->
<!--     aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), -->
<!--     fill = NA, color = "black", linewidth = 0.6 -->
<!--   ) + -->
<!--   geom_rect( -->
<!--     data = df_terminal, -->
<!--     aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), -->
<!--     fill = "black" -->
<!--   ) + -->
<!--   scale_fill_identity() + -->
<!--   facet_wrap(~ row_id) + #, scales = "free_y" -->
<!--   coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max)+300),clip = "off") + -->
<!--   scale_y_reverse(limits = c(3.6, 0.4), -->
<!--                   breaks = c(3, 2, 1),  # Positions for ticks -->
<!--                   labels = c("Future\n(in 5 yrs)","Today\n(at 3 yrs old)","Initial\ncondition"))+ -->
<!--    geom_text( -->
<!--     data = df_range_SOH_long, -->
<!--     aes(x = 360+40, y = as.numeric(factor(year)), label = label), -->
<!--     hjust = 0, size = 3 -->
<!--   )+ -->
<!--   theme_minimal() + -->
<!--   theme( -->
<!--     axis.title = element_blank(), -->
<!--     axis.text.x = element_blank(), -->
<!--     axis.text.y = element_text(colour="black", size = 10), -->
<!--     axis.ticks = element_blank(), -->
<!--     panel.grid = element_blank() -->
<!--   ) -->

<!-- # ggsave(plot = Range_SoH_full_image, filename  = here::here("survey","images","battery_choices", "SoH_range_full_image.png"), width = 15, height = 12) -->
<!-- ggsave(plot = Range_SoH_full_image, filename  = here::here("images","battery_choices_version3", "SoH_range_full_image.png"), width = 14, height = 10) -->



<!-- ``` -->

<!-- #### Individual image -->
<!-- ```{r} -->
<!--  library(ragg) -->
<!-- # Create output directory if it doesn't exist -->
<!-- # output_dir <- here::here("survey", "images", "battery_choices") -->
<!-- output_dir <- here::here( "images", "battery_choices_version3") -->
<!-- if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE) -->

<!-- # Get unique row_ids -->
<!-- row_ids <- unique(df_segmented$row_id) -->

<!-- for (id in row_ids) { -->

<!--   # Filter data for this row_id -->
<!--   segmented_i <- df_segmented %>% filter(row_id == id) -->
<!--   outline_i   <- df_battery_outline %>% filter(row_id == id) -->
<!--   terminal_i  <- df_terminal %>% filter(row_id == id) -->
<!--   label_i     <- df_range_SOH_long %>% filter(row_id == id) -->

<!--   # Get the image name -->
<!--   image_filename <- label_i$image_name[1]  # Assuming it's the same for all years per row_id -->

<!--   # Build the plot -->
<!--   p <- ggplot() + -->
<!--     geom_rect( -->
<!--       data = segmented_i, -->
<!--       aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, -->
<!--           fill = ifelse(filled, fill_color, "white")), -->
<!--       color = NA -->
<!--     ) + -->
<!--     geom_rect( -->
<!--       data = outline_i, -->
<!--       aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), -->
<!--       fill = NA, color = "black", linewidth = 0.6 -->
<!--     ) + -->
<!--     geom_rect( -->
<!--       data = terminal_i, -->
<!--       aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), -->
<!--       fill = "black" -->
<!--     ) + -->
<!--     scale_fill_identity() + -->
<!--     coord_cartesian(xlim = c(0, max(df_range_SOH_long$battery_range_max)+200),  clip = "off") + -->
<!--     scale_y_reverse( -->
<!--       limits = c(3.6, 0.4), -->
<!--       breaks = c(3, 2, 1), -->
<!--       labels = c("Future\n(in 5 yrs)","Today\n(at 3 yrs old)","Initial\ncondition"))+ -->
<!--     geom_text( -->
<!--       data = label_i, -->
<!--       aes(x = 360+40, y = as.numeric(factor(year)), label = label), -->
<!--       hjust = 0, size = 5 -->
<!--     ) + -->
<!--     theme_minimal() + -->
<!--     theme( -->
<!--       axis.title = element_blank(), -->
<!--       axis.text.x =element_blank(), -->
<!--       axis.text.y = element_text(colour = "black", size = 14), -->
<!--       axis.ticks = element_blank(), -->
<!--       panel.grid = element_blank(), -->
<!--       panel.spacing = unit(0, "pt"), -->
<!--       plot.margin = margin(0,0,0,0), -->
<!--       axis.ticks.length = unit(0, "pt") -->
<!--     ) -->

<!--   # Save the image -->
<!--   # ggsave( -->
<!--   #   filename = file.path(output_dir, paste0(image_filename, ".png")), -->
<!--   #   plot = p, -->
<!--   #   width = 3, -->
<!--   #   height = 3, -->
<!--   #   dpi = 250 -->
<!--   # -->
<!--   # ) -->

<!-- agg_png( -->
<!--   filename = file.path(output_dir, paste0(image_filename, ".png")), -->
<!--   width = 4, -->
<!--   height = 2.6, -->
<!--   units = "in", -->
<!--   res = 250 -->
<!-- ) -->
<!-- print(p) -->
<!-- dev.off() -->
<!-- } -->
<!-- ``` -->



<!-- # Achived codes -->
<!-- ### differ by SoH -->
<!-- ```{r} -->

<!-- library(ggplot2) -->
<!-- library(dplyr) -->
<!-- library(tidyr) -->
<!-- library(scales) -->

<!-- segments <- 100 -->
<!-- max_battery_health <- 1 -->
<!-- segment_width <- max_battery_health / segments -->

<!-- # Create visual bar representation by 100% -->
<!-- df_segmented <- df_range_SOH_long %>% -->
<!--   mutate( -->
<!--     row_id = factor(row_id), -->
<!--     fill_color = col_numeric(c("red", "yellow", "green"), domain = c(0.4, 1))(battery_health), -->
<!--     visual_filled = ceiling(battery_health * segments), -->
<!--     y_center = as.numeric(factor(year)) -->
<!--   ) %>% -->
<!--   uncount(weights = segments, .id = "segment") %>% -->
<!--   mutate( -->
<!--     filled = segment <= visual_filled, -->
<!--     xmin = (segment - 1) * segment_width, -->
<!--     xmax = segment * segment_width, -->
<!--     ymin = y_center - 0.3, -->
<!--     ymax = y_center + 0.3 -->
<!--   ) -->

<!-- # Battery outline -->
<!-- df_battery_outline <- df_range_SOH_long %>% -->
<!--   mutate( -->
<!--     row_id = factor(row_id), -->
<!--     y_center = as.numeric(factor(year)), -->
<!--     xmin = 0, -->
<!--     xmax = max_battery_health, -->
<!--     ymin = y_center - 0.3, -->
<!--     ymax = y_center + 0.3 -->
<!--   ) -->

<!-- # Terminal -->
<!-- df_terminal <-df_battery_outline %>% -->
<!--   mutate( -->
<!--     xmin = max_battery_health, -->
<!--     xmax = max_battery_health + 0.05, -->
<!--     ymin = ymin + 0.1, -->
<!--     ymax = ymax - 0.1 -->
<!--   ) -->


<!-- # Plot -->
<!-- ggplot() + -->
<!--   geom_rect( -->
<!--     data = df_segmented, #%>% filter(row_id==1), -->
<!--     aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = ifelse(filled, fill_color, "white")), -->
<!--     color = NA -->
<!--   ) + -->
<!--   geom_rect( -->
<!--     data = df_battery_outline, -->
<!--     aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), -->
<!--     fill = NA, color = "black", linewidth = 0.6 -->
<!--   ) + -->
<!--   geom_rect( -->
<!--     data = df_terminal, -->
<!--     aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), -->
<!--     fill = "black" -->
<!--   ) + -->
<!--   scale_fill_identity() + -->
<!--   facet_wrap(~ row_id) + #, scales = "free_y" -->
<!--   coord_cartesian(xlim = c(0, max_battery_health + 0.15)) + -->
<!--   theme_minimal() + -->
<!--   theme( -->
<!--     axis.title = element_blank(), -->
<!--     axis.text = element_blank(), -->
<!--     axis.ticks = element_blank(), -->
<!--     panel.grid = element_blank() -->
<!--   ) -->
<!-- ``` -->


